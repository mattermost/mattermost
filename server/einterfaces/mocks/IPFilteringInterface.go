// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// IPFilteringInterface is an autogenerated mock type for the IPFilteringInterface type
type IPFilteringInterface struct {
	mock.Mock
}

// ApplyIPFilters provides a mock function with given fields: allowedIPRanges
func (_m *IPFilteringInterface) ApplyIPFilters(allowedIPRanges *model.AllowedIPRanges) (*model.AllowedIPRanges, error) {
	ret := _m.Called(allowedIPRanges)

	if len(ret) == 0 {
		panic("no return value specified for ApplyIPFilters")
	}

	var r0 *model.AllowedIPRanges
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AllowedIPRanges) (*model.AllowedIPRanges, error)); ok {
		return rf(allowedIPRanges)
	}
	if rf, ok := ret.Get(0).(func(*model.AllowedIPRanges) *model.AllowedIPRanges); ok {
		r0 = rf(allowedIPRanges)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AllowedIPRanges)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AllowedIPRanges) error); ok {
		r1 = rf(allowedIPRanges)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPFilters provides a mock function with given fields:
func (_m *IPFilteringInterface) GetIPFilters() (*model.AllowedIPRanges, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIPFilters")
	}

	var r0 *model.AllowedIPRanges
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.AllowedIPRanges, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.AllowedIPRanges); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AllowedIPRanges)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPFilteringInterface creates a new instance of IPFilteringInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPFilteringInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPFilteringInterface {
	mock := &IPFilteringInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
