// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	request "github.com/mattermost/mattermost/server/public/shared/request"
	mock "github.com/stretchr/testify/mock"
)

// SamlInterface is an autogenerated mock type for the SamlInterface type
type SamlInterface struct {
	mock.Mock
}

// BuildRequest provides a mock function with given fields: c, relayState
func (_m *SamlInterface) BuildRequest(c request.CTX, relayState string) (*model.SamlAuthRequest, *model.AppError) {
	ret := _m.Called(c, relayState)

	if len(ret) == 0 {
		panic("no return value specified for BuildRequest")
	}

	var r0 *model.SamlAuthRequest
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string) (*model.SamlAuthRequest, *model.AppError)); ok {
		return rf(c, relayState)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string) *model.SamlAuthRequest); ok {
		r0 = rf(c, relayState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SamlAuthRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string) *model.AppError); ok {
		r1 = rf(c, relayState)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// CheckProviderAttributes provides a mock function with given fields: c, SS, ouser, patch
func (_m *SamlInterface) CheckProviderAttributes(c request.CTX, SS *model.SamlSettings, ouser *model.User, patch *model.UserPatch) string {
	ret := _m.Called(c, SS, ouser, patch)

	if len(ret) == 0 {
		panic("no return value specified for CheckProviderAttributes")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(request.CTX, *model.SamlSettings, *model.User, *model.UserPatch) string); ok {
		r0 = rf(c, SS, ouser, patch)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConfigureSP provides a mock function with given fields: c
func (_m *SamlInterface) ConfigureSP(c request.CTX) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureSP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(request.CTX) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoLogin provides a mock function with given fields: c, encodedXML, relayState
func (_m *SamlInterface) DoLogin(c request.CTX, encodedXML string, relayState map[string]string) (*model.User, *model.AppError) {
	ret := _m.Called(c, encodedXML, relayState)

	if len(ret) == 0 {
		panic("no return value specified for DoLogin")
	}

	var r0 *model.User
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, map[string]string) (*model.User, *model.AppError)); ok {
		return rf(c, encodedXML, relayState)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, map[string]string) *model.User); ok {
		r0 = rf(c, encodedXML, relayState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, map[string]string) *model.AppError); ok {
		r1 = rf(c, encodedXML, relayState)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetMetadata provides a mock function with given fields: c
func (_m *SamlInterface) GetMetadata(c request.CTX) (string, *model.AppError) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 string
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX) (string, *model.AppError)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(request.CTX) string); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(request.CTX) *model.AppError); ok {
		r1 = rf(c)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// NewSamlInterface creates a new instance of SamlInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSamlInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SamlInterface {
	mock := &SamlInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
