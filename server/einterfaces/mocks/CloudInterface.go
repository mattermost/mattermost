// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// CloudInterface is an autogenerated mock type for the CloudInterface type
type CloudInterface struct {
	mock.Mock
}

// ApplyIPFilters provides a mock function with given fields: userID, ranges
func (_m *CloudInterface) ApplyIPFilters(userID string, ranges *model.AllowedIPRanges) (*model.AllowedIPRanges, error) {
	ret := _m.Called(userID, ranges)

	if len(ret) == 0 {
		panic("no return value specified for ApplyIPFilters")
	}

	var r0 *model.AllowedIPRanges
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.AllowedIPRanges) (*model.AllowedIPRanges, error)); ok {
		return rf(userID, ranges)
	}
	if rf, ok := ret.Get(0).(func(string, *model.AllowedIPRanges) *model.AllowedIPRanges); ok {
		r0 = rf(userID, ranges)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AllowedIPRanges)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.AllowedIPRanges) error); ok {
		r1 = rf(userID, ranges)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeSubscription provides a mock function with given fields: userID, subscriptionID, subscriptionChange
func (_m *CloudInterface) ChangeSubscription(userID string, subscriptionID string, subscriptionChange *model.SubscriptionChange) (*model.Subscription, error) {
	ret := _m.Called(userID, subscriptionID, subscriptionChange)

	if len(ret) == 0 {
		panic("no return value specified for ChangeSubscription")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *model.SubscriptionChange) (*model.Subscription, error)); ok {
		return rf(userID, subscriptionID, subscriptionChange)
	}
	if rf, ok := ret.Get(0).(func(string, string, *model.SubscriptionChange) *model.Subscription); ok {
		r0 = rf(userID, subscriptionID, subscriptionChange)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *model.SubscriptionChange) error); ok {
		r1 = rf(userID, subscriptionID, subscriptionChange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCWSConnection provides a mock function with given fields: userId
func (_m *CloudInterface) CheckCWSConnection(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for CheckCWSConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateSubscriptionHistoryEvent provides a mock function with given fields: userID, userCount
func (_m *CloudInterface) CreateOrUpdateSubscriptionHistoryEvent(userID string, userCount int) (*model.SubscriptionHistory, error) {
	ret := _m.Called(userID, userCount)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSubscriptionHistoryEvent")
	}

	var r0 *model.SubscriptionHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (*model.SubscriptionHistory, error)); ok {
		return rf(userID, userCount)
	}
	if rf, ok := ret.Get(0).(func(string, int) *model.SubscriptionHistory); ok {
		r0 = rf(userID, userCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SubscriptionHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(userID, userCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudCustomer provides a mock function with given fields: userID
func (_m *CloudInterface) GetCloudCustomer(userID string) (*model.CloudCustomer, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudCustomer")
	}

	var r0 *model.CloudCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.CloudCustomer, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.CloudCustomer); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CloudCustomer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudLimits provides a mock function with given fields: userID
func (_m *CloudInterface) GetCloudLimits(userID string) (*model.ProductLimits, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudLimits")
	}

	var r0 *model.ProductLimits
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductLimits, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductLimits); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductLimits)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudProduct provides a mock function with given fields: userID, productID
func (_m *CloudInterface) GetCloudProduct(userID string, productID string) (*model.Product, error) {
	ret := _m.Called(userID, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudProduct")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Product, error)); ok {
		return rf(userID, productID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Product); ok {
		r0 = rf(userID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudProducts provides a mock function with given fields: userID, includeLegacyProducts
func (_m *CloudInterface) GetCloudProducts(userID string, includeLegacyProducts bool) ([]*model.Product, error) {
	ret := _m.Called(userID, includeLegacyProducts)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudProducts")
	}

	var r0 []*model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) ([]*model.Product, error)); ok {
		return rf(userID, includeLegacyProducts)
	}
	if rf, ok := ret.Get(0).(func(string, bool) []*model.Product); ok {
		r0 = rf(userID, includeLegacyProducts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(userID, includeLegacyProducts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPFilters provides a mock function with given fields: userID
func (_m *CloudInterface) GetIPFilters(userID string) (*model.AllowedIPRanges, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetIPFilters")
	}

	var r0 *model.AllowedIPRanges
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AllowedIPRanges, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AllowedIPRanges); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AllowedIPRanges)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallation provides a mock function with given fields: userID
func (_m *CloudInterface) GetInstallation(userID string) (*model.Installation, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallation")
	}

	var r0 *model.Installation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Installation, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Installation); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Installation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoicePDF provides a mock function with given fields: userID, invoiceID
func (_m *CloudInterface) GetInvoicePDF(userID string, invoiceID string) ([]byte, string, error) {
	ret := _m.Called(userID, invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoicePDF")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, string, error)); ok {
		return rf(userID, invoiceID)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(userID, invoiceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(userID, invoiceID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(userID, invoiceID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInvoicesForSubscription provides a mock function with given fields: userID
func (_m *CloudInterface) GetInvoicesForSubscription(userID string) ([]*model.Invoice, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoicesForSubscription")
	}

	var r0 []*model.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Invoice, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Invoice); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelfHostedProducts provides a mock function with given fields: userID
func (_m *CloudInterface) GetSelfHostedProducts(userID string) ([]*model.Product, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSelfHostedProducts")
	}

	var r0 []*model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Product, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Product); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: userID
func (_m *CloudInterface) GetSubscription(userID string) (*model.Subscription, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *model.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Subscription, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Subscription); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleLicenseChange provides a mock function with given fields:
func (_m *CloudInterface) HandleLicenseChange() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HandleLicenseChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InvalidateCaches provides a mock function with given fields:
func (_m *CloudInterface) InvalidateCaches() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InvalidateCaches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToNewsletter provides a mock function with given fields: userID, req
func (_m *CloudInterface) SubscribeToNewsletter(userID string, req *model.SubscribeNewsletterRequest) error {
	ret := _m.Called(userID, req)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToNewsletter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.SubscribeNewsletterRequest) error); ok {
		r0 = rf(userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCloudCustomer provides a mock function with given fields: userID, customerInfo
func (_m *CloudInterface) UpdateCloudCustomer(userID string, customerInfo *model.CloudCustomerInfo) (*model.CloudCustomer, error) {
	ret := _m.Called(userID, customerInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCloudCustomer")
	}

	var r0 *model.CloudCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.CloudCustomerInfo) (*model.CloudCustomer, error)); ok {
		return rf(userID, customerInfo)
	}
	if rf, ok := ret.Get(0).(func(string, *model.CloudCustomerInfo) *model.CloudCustomer); ok {
		r0 = rf(userID, customerInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CloudCustomer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.CloudCustomerInfo) error); ok {
		r1 = rf(userID, customerInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCloudCustomerAddress provides a mock function with given fields: userID, address
func (_m *CloudInterface) UpdateCloudCustomerAddress(userID string, address *model.Address) (*model.CloudCustomer, error) {
	ret := _m.Called(userID, address)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCloudCustomerAddress")
	}

	var r0 *model.CloudCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Address) (*model.CloudCustomer, error)); ok {
		return rf(userID, address)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Address) *model.CloudCustomer); ok {
		r0 = rf(userID, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CloudCustomer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.Address) error); ok {
		r1 = rf(userID, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateBusinessEmail provides a mock function with given fields: userID, email
func (_m *CloudInterface) ValidateBusinessEmail(userID string, email string) error {
	ret := _m.Called(userID, email)

	if len(ret) == 0 {
		panic("no return value specified for ValidateBusinessEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCloudInterface creates a new instance of CloudInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudInterface {
	mock := &CloudInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
