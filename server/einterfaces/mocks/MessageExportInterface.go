// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	request "github.com/mattermost/mattermost/server/public/shared/request"
	mock "github.com/stretchr/testify/mock"
)

// MessageExportInterface is an autogenerated mock type for the MessageExportInterface type
type MessageExportInterface struct {
	mock.Mock
}

// RunExport provides a mock function with given fields: rctx, format, since, limit
func (_m *MessageExportInterface) RunExport(rctx request.CTX, format string, since int64, limit int) (int, *model.AppError) {
	ret := _m.Called(rctx, format, since, limit)

	if len(ret) == 0 {
		panic("no return value specified for RunExport")
	}

	var r0 int
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, string, int64, int) (int, *model.AppError)); ok {
		return rf(rctx, format, since, limit)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, int64, int) int); ok {
		r0 = rf(rctx, format, since, limit)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, int64, int) *model.AppError); ok {
		r1 = rf(rctx, format, since, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// StartSynchronizeJob provides a mock function with given fields: rctx, exportFromTimestamp
func (_m *MessageExportInterface) StartSynchronizeJob(rctx request.CTX, exportFromTimestamp int64) (*model.Job, *model.AppError) {
	ret := _m.Called(rctx, exportFromTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for StartSynchronizeJob")
	}

	var r0 *model.Job
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX, int64) (*model.Job, *model.AppError)); ok {
		return rf(rctx, exportFromTimestamp)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, int64) *model.Job); ok {
		r0 = rf(rctx, exportFromTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, int64) *model.AppError); ok {
		r1 = rf(rctx, exportFromTimestamp)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// NewMessageExportInterface creates a new instance of MessageExportInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageExportInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageExportInterface {
	mock := &MessageExportInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
