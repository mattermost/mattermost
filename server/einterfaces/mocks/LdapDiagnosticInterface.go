// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	request "github.com/mattermost/mattermost/server/public/shared/request"
	mock "github.com/stretchr/testify/mock"
)

// LdapDiagnosticInterface is an autogenerated mock type for the LdapDiagnosticInterface type
type LdapDiagnosticInterface struct {
	mock.Mock
}

// GetVendorNameAndVendorVersion provides a mock function with given fields: rctx
func (_m *LdapDiagnosticInterface) GetVendorNameAndVendorVersion(rctx request.CTX) (string, string, error) {
	ret := _m.Called(rctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVendorNameAndVendorVersion")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(request.CTX) (string, string, error)); ok {
		return rf(rctx)
	}
	if rf, ok := ret.Get(0).(func(request.CTX) string); ok {
		r0 = rf(rctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(request.CTX) string); ok {
		r1 = rf(rctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(request.CTX) error); ok {
		r2 = rf(rctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RunTest provides a mock function with given fields: rctx
func (_m *LdapDiagnosticInterface) RunTest(rctx request.CTX) *model.AppError {
	ret := _m.Called(rctx)

	if len(ret) == 0 {
		panic("no return value specified for RunTest")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(request.CTX) *model.AppError); ok {
		r0 = rf(rctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// NewLdapDiagnosticInterface creates a new instance of LdapDiagnosticInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLdapDiagnosticInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LdapDiagnosticInterface {
	mock := &LdapDiagnosticInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
