// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	request "github.com/mattermost/mattermost/server/public/shared/request"
	mock "github.com/stretchr/testify/mock"
)

// AttributesStore is an autogenerated mock type for the AttributesStore type
type AttributesStore struct {
	mock.Mock
}

// GetChannelMembersToRemove provides a mock function with given fields: rctx, channelID, opts
func (_m *AttributesStore) GetChannelMembersToRemove(rctx request.CTX, channelID string, opts model.SubjectSearchOptions) ([]*model.ChannelMember, error) {
	ret := _m.Called(rctx, channelID, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelMembersToRemove")
	}

	var r0 []*model.ChannelMember
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, string, model.SubjectSearchOptions) ([]*model.ChannelMember, error)); ok {
		return rf(rctx, channelID, opts)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, model.SubjectSearchOptions) []*model.ChannelMember); ok {
		r0 = rf(rctx, channelID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ChannelMember)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, model.SubjectSearchOptions) error); ok {
		r1 = rf(rctx, channelID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubject provides a mock function with given fields: rctx, ID, groupID
func (_m *AttributesStore) GetSubject(rctx request.CTX, ID string, groupID string) (*model.Subject, error) {
	ret := _m.Called(rctx, ID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubject")
	}

	var r0 *model.Subject
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, string, string) (*model.Subject, error)); ok {
		return rf(rctx, ID, groupID)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, string) *model.Subject); ok {
		r0 = rf(rctx, ID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subject)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, string) error); ok {
		r1 = rf(rctx, ID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshAttributes provides a mock function with given fields:
func (_m *AttributesStore) RefreshAttributes() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RefreshAttributes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchUsers provides a mock function with given fields: rctx, opts
func (_m *AttributesStore) SearchUsers(rctx request.CTX, opts model.SubjectSearchOptions) ([]*model.User, int64, error) {
	ret := _m.Called(rctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 []*model.User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(request.CTX, model.SubjectSearchOptions) ([]*model.User, int64, error)); ok {
		return rf(rctx, opts)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, model.SubjectSearchOptions) []*model.User); ok {
		r0 = rf(rctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, model.SubjectSearchOptions) int64); ok {
		r1 = rf(rctx, opts)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(request.CTX, model.SubjectSearchOptions) error); ok {
		r2 = rf(rctx, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAttributesStore creates a new instance of AttributesStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttributesStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttributesStore {
	mock := &AttributesStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
