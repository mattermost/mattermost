// Code generated by mockery v2.53.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// WikiStore is an autogenerated mock type for the WikiStore type
type WikiStore struct {
	mock.Mock
}

// CreateWikiWithDefaultPage provides a mock function with given fields: wiki, userId
func (_m *WikiStore) CreateWikiWithDefaultPage(wiki *model.Wiki, userId string) (*model.Wiki, error) {
	ret := _m.Called(wiki, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateWikiWithDefaultPage")
	}

	var r0 *model.Wiki
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Wiki, string) (*model.Wiki, error)); ok {
		return rf(wiki, userId)
	}
	if rf, ok := ret.Get(0).(func(*model.Wiki, string) *model.Wiki); ok {
		r0 = rf(wiki, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Wiki, string) error); ok {
		r1 = rf(wiki, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id, hard
func (_m *WikiStore) Delete(id string, hard bool) error {
	ret := _m.Called(id, hard)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(id, hard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllPagesForWiki provides a mock function with given fields: wikiId
func (_m *WikiStore) DeleteAllPagesForWiki(wikiId string) error {
	ret := _m.Called(wikiId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllPagesForWiki")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(wikiId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *WikiStore) Get(id string) (*model.Wiki, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Wiki
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Wiki, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Wiki); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAbandonedPages provides a mock function with given fields: cutoffTime
func (_m *WikiStore) GetAbandonedPages(cutoffTime int64) ([]*model.Post, error) {
	ret := _m.Called(cutoffTime)

	if len(ret) == 0 {
		panic("no return value specified for GetAbandonedPages")
	}

	var r0 []*model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*model.Post, error)); ok {
		return rf(cutoffTime)
	}
	if rf, ok := ret.Get(0).(func(int64) []*model.Post); ok {
		r0 = rf(cutoffTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(cutoffTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForChannel provides a mock function with given fields: channelId, includeDeleted
func (_m *WikiStore) GetForChannel(channelId string, includeDeleted bool) ([]*model.Wiki, error) {
	ret := _m.Called(channelId, includeDeleted)

	if len(ret) == 0 {
		panic("no return value specified for GetForChannel")
	}

	var r0 []*model.Wiki
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) ([]*model.Wiki, error)); ok {
		return rf(channelId, includeDeleted)
	}
	if rf, ok := ret.Get(0).(func(string, bool) []*model.Wiki); ok {
		r0 = rf(channelId, includeDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(channelId, includeDeleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPages provides a mock function with given fields: wikiId, offset, limit
func (_m *WikiStore) GetPages(wikiId string, offset int, limit int) ([]*model.Post, error) {
	ret := _m.Called(wikiId, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPages")
	}

	var r0 []*model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*model.Post, error)); ok {
		return rf(wikiId, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*model.Post); ok {
		r0 = rf(wikiId, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(wikiId, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MovePageToWiki provides a mock function with given fields: pageId, targetWikiId, parentPageId
func (_m *WikiStore) MovePageToWiki(pageId string, targetWikiId string, parentPageId *string) error {
	ret := _m.Called(pageId, targetWikiId, parentPageId)

	if len(ret) == 0 {
		panic("no return value specified for MovePageToWiki")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *string) error); ok {
		r0 = rf(pageId, targetWikiId, parentPageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: wiki
func (_m *WikiStore) Save(wiki *model.Wiki) (*model.Wiki, error) {
	ret := _m.Called(wiki)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *model.Wiki
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Wiki) (*model.Wiki, error)); ok {
		return rf(wiki)
	}
	if rf, ok := ret.Get(0).(func(*model.Wiki) *model.Wiki); ok {
		r0 = rf(wiki)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Wiki) error); ok {
		r1 = rf(wiki)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: wiki
func (_m *WikiStore) Update(wiki *model.Wiki) (*model.Wiki, error) {
	ret := _m.Called(wiki)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Wiki
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Wiki) (*model.Wiki, error)); ok {
		return rf(wiki)
	}
	if rf, ok := ret.Get(0).(func(*model.Wiki) *model.Wiki); ok {
		r0 = rf(wiki)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wiki)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Wiki) error); ok {
		r1 = rf(wiki)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWikiStore creates a new instance of WikiStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWikiStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *WikiStore {
	mock := &WikiStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
