// Code generated by mockery v2.53.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// PageStore is an autogenerated mock type for the PageStore type
type PageStore struct {
	mock.Mock
}

// ChangePageParent provides a mock function with given fields: postID, newParentID
func (_m *PageStore) ChangePageParent(postID string, newParentID string) error {
	ret := _m.Called(postID, newParentID)

	if len(ret) == 0 {
		panic("no return value specified for ChangePageParent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(postID, newParentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChannelPages provides a mock function with given fields: channelID
func (_m *PageStore) GetChannelPages(channelID string) (*model.PostList, error) {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelPages")
	}

	var r0 *model.PostList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PostList, error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PostList); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsForPage provides a mock function with given fields: pageID, options
func (_m *PageStore) GetCommentsForPage(pageID string, options model.GetPostsOptions) (*model.PostList, error) {
	ret := _m.Called(pageID, options)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsForPage")
	}

	var r0 *model.PostList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.GetPostsOptions) (*model.PostList, error)); ok {
		return rf(pageID, options)
	}
	if rf, ok := ret.Get(0).(func(string, model.GetPostsOptions) *model.PostList); ok {
		r0 = rf(pageID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.GetPostsOptions) error); ok {
		r1 = rf(pageID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPageAncestors provides a mock function with given fields: postID
func (_m *PageStore) GetPageAncestors(postID string) (*model.PostList, error) {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPageAncestors")
	}

	var r0 *model.PostList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PostList, error)); ok {
		return rf(postID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PostList); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPageChildren provides a mock function with given fields: postID, options
func (_m *PageStore) GetPageChildren(postID string, options model.GetPostsOptions) (*model.PostList, error) {
	ret := _m.Called(postID, options)

	if len(ret) == 0 {
		panic("no return value specified for GetPageChildren")
	}

	var r0 *model.PostList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.GetPostsOptions) (*model.PostList, error)); ok {
		return rf(postID, options)
	}
	if rf, ok := ret.Get(0).(func(string, model.GetPostsOptions) *model.PostList); ok {
		r0 = rf(postID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.GetPostsOptions) error); ok {
		r1 = rf(postID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPageDescendants provides a mock function with given fields: postID
func (_m *PageStore) GetPageDescendants(postID string) (*model.PostList, error) {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPageDescendants")
	}

	var r0 *model.PostList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PostList, error)); ok {
		return rf(postID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PostList); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPageStore creates a new instance of PageStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPageStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PageStore {
	mock := &PageStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
