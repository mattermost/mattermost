// Code generated by mockery v2.53.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// RecapStore is an autogenerated mock type for the RecapStore type
type RecapStore struct {
	mock.Mock
}

// DeleteRecap provides a mock function with given fields: id
func (_m *RecapStore) DeleteRecap(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecapChannels provides a mock function with given fields: recapId
func (_m *RecapStore) DeleteRecapChannels(recapId string) error {
	ret := _m.Called(recapId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecapChannels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(recapId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecap provides a mock function with given fields: id
func (_m *RecapStore) GetRecap(id string) (*model.Recap, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRecap")
	}

	var r0 *model.Recap
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Recap, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Recap); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recap)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecapChannelsByRecapId provides a mock function with given fields: recapId
func (_m *RecapStore) GetRecapChannelsByRecapId(recapId string) ([]*model.RecapChannel, error) {
	ret := _m.Called(recapId)

	if len(ret) == 0 {
		panic("no return value specified for GetRecapChannelsByRecapId")
	}

	var r0 []*model.RecapChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.RecapChannel, error)); ok {
		return rf(recapId)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.RecapChannel); ok {
		r0 = rf(recapId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RecapChannel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(recapId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecapsForUser provides a mock function with given fields: userId, page, perPage
func (_m *RecapStore) GetRecapsForUser(userId string, page int, perPage int) ([]*model.Recap, error) {
	ret := _m.Called(userId, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetRecapsForUser")
	}

	var r0 []*model.Recap
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*model.Recap, error)); ok {
		return rf(userId, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*model.Recap); ok {
		r0 = rf(userId, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Recap)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(userId, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRecap provides a mock function with given fields: recap
func (_m *RecapStore) SaveRecap(recap *model.Recap) (*model.Recap, error) {
	ret := _m.Called(recap)

	if len(ret) == 0 {
		panic("no return value specified for SaveRecap")
	}

	var r0 *model.Recap
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Recap) (*model.Recap, error)); ok {
		return rf(recap)
	}
	if rf, ok := ret.Get(0).(func(*model.Recap) *model.Recap); ok {
		r0 = rf(recap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recap)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Recap) error); ok {
		r1 = rf(recap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecap provides a mock function with given fields: recap
func (_m *RecapStore) UpdateRecap(recap *model.Recap) (*model.Recap, error) {
	ret := _m.Called(recap)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecap")
	}

	var r0 *model.Recap
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Recap) (*model.Recap, error)); ok {
		return rf(recap)
	}
	if rf, ok := ret.Get(0).(func(*model.Recap) *model.Recap); ok {
		r0 = rf(recap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recap)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Recap) error); ok {
		r1 = rf(recap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRecapChannel provides a mock function with given fields: recapChannel
func (_m *RecapStore) SaveRecapChannel(recapChannel *model.RecapChannel) error {
	ret := _m.Called(recapChannel)

	if len(ret) == 0 {
		panic("no return value specified for SaveRecapChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.RecapChannel) error); ok {
		r0 = rf(recapChannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkRecapAsRead provides a mock function with given fields: id
func (_m *RecapStore) MarkRecapAsRead(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for MarkRecapAsRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRecapStatus provides a mock function with given fields: id, status
func (_m *RecapStore) UpdateRecapStatus(id string, status string) error {
	ret := _m.Called(id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecapStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecapStore creates a new instance of RecapStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecapStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecapStore {
	mock := &RecapStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
