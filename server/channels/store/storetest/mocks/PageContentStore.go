// Code generated by mockery v2.53.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// PageContentStore is an autogenerated mock type for the PageContentStore type
type PageContentStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: pageID
func (_m *PageContentStore) Delete(pageID string) error {
	ret := _m.Called(pageID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: pageID
func (_m *PageContentStore) Get(pageID string) (*model.PageContent, error) {
	ret := _m.Called(pageID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.PageContent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PageContent, error)); ok {
		return rf(pageID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PageContent); ok {
		r0 = rf(pageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PageContent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: pageContent
func (_m *PageContentStore) Save(pageContent *model.PageContent) (*model.PageContent, error) {
	ret := _m.Called(pageContent)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *model.PageContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PageContent) (*model.PageContent, error)); ok {
		return rf(pageContent)
	}
	if rf, ok := ret.Get(0).(func(*model.PageContent) *model.PageContent); ok {
		r0 = rf(pageContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PageContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PageContent) error); ok {
		r1 = rf(pageContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: pageContent
func (_m *PageContentStore) Update(pageContent *model.PageContent) (*model.PageContent, error) {
	ret := _m.Called(pageContent)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.PageContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PageContent) (*model.PageContent, error)); ok {
		return rf(pageContent)
	}
	if rf, ok := ret.Get(0).(func(*model.PageContent) *model.PageContent); ok {
		r0 = rf(pageContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PageContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PageContent) error); ok {
		r1 = rf(pageContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPageContentStore creates a new instance of PageContentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPageContentStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PageContentStore {
	mock := &PageContentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
