// Code generated by mockery v2.53.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	request "github.com/mattermost/mattermost/server/public/shared/request"
	mock "github.com/stretchr/testify/mock"
)

// E2EEStore is an autogenerated mock type for the E2EEStore type
type E2EEStore struct {
	mock.Mock
}

// ConsumeOneTimePreKey provides a mock function with given fields: rctx, userId, deviceId
func (_m *E2EEStore) ConsumeOneTimePreKey(rctx request.CTX, userId string, deviceId int64) (*model.E2EEOneTimePreKey, error) {
	ret := _m.Called(rctx, userId, deviceId)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeOneTimePreKey")
	}

	var r0 *model.E2EEOneTimePreKey
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, string, int64) (*model.E2EEOneTimePreKey, error)); ok {
		return rf(rctx, userId, deviceId)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, int64) *model.E2EEOneTimePreKey); ok {
		r0 = rf(rctx, userId, deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.E2EEOneTimePreKey)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, int64) error); ok {
		r1 = rf(rctx, userId, deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceListSnapshot provides a mock function with given fields: rctx, userId
func (_m *E2EEStore) GetDeviceListSnapshot(rctx request.CTX, userId string) (*model.E2EEDeviceListSnapshot, error) {
	ret := _m.Called(rctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceListSnapshot")
	}

	var r0 *model.E2EEDeviceListSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, string) (*model.E2EEDeviceListSnapshot, error)); ok {
		return rf(rctx, userId)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string) *model.E2EEDeviceListSnapshot); ok {
		r0 = rf(rctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.E2EEDeviceListSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string) error); ok {
		r1 = rf(rctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevicesByUser provides a mock function with given fields: rctx, userId, includeDeleted
func (_m *E2EEStore) GetDevicesByUser(rctx request.CTX, userId string, includeDeleted bool) ([]*model.E2EEDevice, error) {
	ret := _m.Called(rctx, userId, includeDeleted)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicesByUser")
	}

	var r0 []*model.E2EEDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, string, bool) ([]*model.E2EEDevice, error)); ok {
		return rf(rctx, userId, includeDeleted)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, bool) []*model.E2EEDevice); ok {
		r0 = rf(rctx, userId, includeDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.E2EEDevice)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, bool) error); ok {
		r1 = rf(rctx, userId, includeDeleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestSignedPreKey provides a mock function with given fields: rctx, userId, deviceId
func (_m *E2EEStore) GetLatestSignedPreKey(rctx request.CTX, userId string, deviceId int64) (*model.E2EESignedPreKey, error) {
	ret := _m.Called(rctx, userId, deviceId)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestSignedPreKey")
	}

	var r0 *model.E2EESignedPreKey
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, string, int64) (*model.E2EESignedPreKey, error)); ok {
		return rf(rctx, userId, deviceId)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string, int64) *model.E2EESignedPreKey); ok {
		r0 = rf(rctx, userId, deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.E2EESignedPreKey)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string, int64) error); ok {
		r1 = rf(rctx, userId, deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOneTimePreKeys provides a mock function with given fields: rctx, opks
func (_m *E2EEStore) InsertOneTimePreKeys(rctx request.CTX, opks []model.E2EEOneTimePreKey) error {
	ret := _m.Called(rctx, opks)

	if len(ret) == 0 {
		panic("no return value specified for InsertOneTimePreKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(request.CTX, []model.E2EEOneTimePreKey) error); ok {
		r0 = rf(rctx, opks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecomputeDeviceListSnapshot provides a mock function with given fields: rctx, userId
func (_m *E2EEStore) RecomputeDeviceListSnapshot(rctx request.CTX, userId string) error {
	ret := _m.Called(rctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for RecomputeDeviceListSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(request.CTX, string) error); ok {
		r0 = rf(rctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertDevice provides a mock function with given fields: rctx, de
func (_m *E2EEStore) UpsertDevice(rctx request.CTX, de *model.E2EEDevice) (*model.E2EEDevice, error) {
	ret := _m.Called(rctx, de)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDevice")
	}

	var r0 *model.E2EEDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, *model.E2EEDevice) (*model.E2EEDevice, error)); ok {
		return rf(rctx, de)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, *model.E2EEDevice) *model.E2EEDevice); ok {
		r0 = rf(rctx, de)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.E2EEDevice)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, *model.E2EEDevice) error); ok {
		r1 = rf(rctx, de)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSignedPreKey provides a mock function with given fields: rctx, spk
func (_m *E2EEStore) UpsertSignedPreKey(rctx request.CTX, spk *model.E2EESignedPreKey) error {
	ret := _m.Called(rctx, spk)

	if len(ret) == 0 {
		panic("no return value specified for UpsertSignedPreKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(request.CTX, *model.E2EESignedPreKey) error); ok {
		r0 = rf(rctx, spk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewE2EEStore creates a new instance of E2EEStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewE2EEStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *E2EEStore {
	mock := &E2EEStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
