// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	context "context"

	mlog "github.com/mattermost/mattermost/server/public/shared/mlog"
	mock "github.com/stretchr/testify/mock"

	model "github.com/mattermost/mattermost/server/public/model"

	sql "database/sql"

	store "github.com/mattermost/mattermost/server/v8/channels/store"

	time "time"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Audit provides a mock function with given fields:
func (_m *Store) Audit() store.AuditStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Audit")
	}

	var r0 store.AuditStore
	if rf, ok := ret.Get(0).(func() store.AuditStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AuditStore)
		}
	}

	return r0
}

// Bot provides a mock function with given fields:
func (_m *Store) Bot() store.BotStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bot")
	}

	var r0 store.BotStore
	if rf, ok := ret.Get(0).(func() store.BotStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.BotStore)
		}
	}

	return r0
}

// Channel provides a mock function with given fields:
func (_m *Store) Channel() store.ChannelStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 store.ChannelStore
	if rf, ok := ret.Get(0).(func() store.ChannelStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ChannelStore)
		}
	}

	return r0
}

// ChannelBookmark provides a mock function with given fields:
func (_m *Store) ChannelBookmark() store.ChannelBookmarkStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChannelBookmark")
	}

	var r0 store.ChannelBookmarkStore
	if rf, ok := ret.Get(0).(func() store.ChannelBookmarkStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ChannelBookmarkStore)
		}
	}

	return r0
}

// ChannelMemberHistory provides a mock function with given fields:
func (_m *Store) ChannelMemberHistory() store.ChannelMemberHistoryStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChannelMemberHistory")
	}

	var r0 store.ChannelMemberHistoryStore
	if rf, ok := ret.Get(0).(func() store.ChannelMemberHistoryStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ChannelMemberHistoryStore)
		}
	}

	return r0
}

// CheckIntegrity provides a mock function with given fields:
func (_m *Store) CheckIntegrity() <-chan model.IntegrityCheckResult {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckIntegrity")
	}

	var r0 <-chan model.IntegrityCheckResult
	if rf, ok := ret.Get(0).(func() <-chan model.IntegrityCheckResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan model.IntegrityCheckResult)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Store) Close() {
	_m.Called()
}

// ClusterDiscovery provides a mock function with given fields:
func (_m *Store) ClusterDiscovery() store.ClusterDiscoveryStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterDiscovery")
	}

	var r0 store.ClusterDiscoveryStore
	if rf, ok := ret.Get(0).(func() store.ClusterDiscoveryStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ClusterDiscoveryStore)
		}
	}

	return r0
}

// Command provides a mock function with given fields:
func (_m *Store) Command() store.CommandStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Command")
	}

	var r0 store.CommandStore
	if rf, ok := ret.Get(0).(func() store.CommandStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CommandStore)
		}
	}

	return r0
}

// CommandWebhook provides a mock function with given fields:
func (_m *Store) CommandWebhook() store.CommandWebhookStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CommandWebhook")
	}

	var r0 store.CommandWebhookStore
	if rf, ok := ret.Get(0).(func() store.CommandWebhookStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CommandWebhookStore)
		}
	}

	return r0
}

// Compliance provides a mock function with given fields:
func (_m *Store) Compliance() store.ComplianceStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Compliance")
	}

	var r0 store.ComplianceStore
	if rf, ok := ret.Get(0).(func() store.ComplianceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ComplianceStore)
		}
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *Store) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// DesktopTokens provides a mock function with given fields:
func (_m *Store) DesktopTokens() store.DesktopTokensStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DesktopTokens")
	}

	var r0 store.DesktopTokensStore
	if rf, ok := ret.Get(0).(func() store.DesktopTokensStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.DesktopTokensStore)
		}
	}

	return r0
}

// Draft provides a mock function with given fields:
func (_m *Store) Draft() store.DraftStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Draft")
	}

	var r0 store.DraftStore
	if rf, ok := ret.Get(0).(func() store.DraftStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.DraftStore)
		}
	}

	return r0
}

// DropAllTables provides a mock function with given fields:
func (_m *Store) DropAllTables() {
	_m.Called()
}

// Emoji provides a mock function with given fields:
func (_m *Store) Emoji() store.EmojiStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Emoji")
	}

	var r0 store.EmojiStore
	if rf, ok := ret.Get(0).(func() store.EmojiStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.EmojiStore)
		}
	}

	return r0
}

// FileInfo provides a mock function with given fields:
func (_m *Store) FileInfo() store.FileInfoStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FileInfo")
	}

	var r0 store.FileInfoStore
	if rf, ok := ret.Get(0).(func() store.FileInfoStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.FileInfoStore)
		}
	}

	return r0
}

// GetAppliedMigrations provides a mock function with given fields:
func (_m *Store) GetAppliedMigrations() ([]model.AppliedMigration, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAppliedMigrations")
	}

	var r0 []model.AppliedMigration
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.AppliedMigration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.AppliedMigration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppliedMigration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBSchemaVersion provides a mock function with given fields:
func (_m *Store) GetDBSchemaVersion() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDBSchemaVersion")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbVersion provides a mock function with given fields: numerical
func (_m *Store) GetDbVersion(numerical bool) (string, error) {
	ret := _m.Called(numerical)

	if len(ret) == 0 {
		panic("no return value specified for GetDbVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (string, error)); ok {
		return rf(numerical)
	}
	if rf, ok := ret.Get(0).(func(bool) string); ok {
		r0 = rf(numerical)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(numerical)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInternalMasterDB provides a mock function with given fields:
func (_m *Store) GetInternalMasterDB() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInternalMasterDB")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetInternalReplicaDB provides a mock function with given fields:
func (_m *Store) GetInternalReplicaDB() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInternalReplicaDB")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetLocalSchemaVersion provides a mock function with given fields:
func (_m *Store) GetLocalSchemaVersion() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocalSchemaVersion")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Group provides a mock function with given fields:
func (_m *Store) Group() store.GroupStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 store.GroupStore
	if rf, ok := ret.Get(0).(func() store.GroupStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.GroupStore)
		}
	}

	return r0
}

// Job provides a mock function with given fields:
func (_m *Store) Job() store.JobStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Job")
	}

	var r0 store.JobStore
	if rf, ok := ret.Get(0).(func() store.JobStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.JobStore)
		}
	}

	return r0
}

// License provides a mock function with given fields:
func (_m *Store) License() store.LicenseStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for License")
	}

	var r0 store.LicenseStore
	if rf, ok := ret.Get(0).(func() store.LicenseStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.LicenseStore)
		}
	}

	return r0
}

// LinkMetadata provides a mock function with given fields:
func (_m *Store) LinkMetadata() store.LinkMetadataStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LinkMetadata")
	}

	var r0 store.LinkMetadataStore
	if rf, ok := ret.Get(0).(func() store.LinkMetadataStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.LinkMetadataStore)
		}
	}

	return r0
}

// LockToMaster provides a mock function with given fields:
func (_m *Store) LockToMaster() {
	_m.Called()
}

// Logger provides a mock function with given fields:
func (_m *Store) Logger() mlog.LoggerIFace {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 mlog.LoggerIFace
	if rf, ok := ret.Get(0).(func() mlog.LoggerIFace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mlog.LoggerIFace)
		}
	}

	return r0
}

// MarkSystemRanUnitTests provides a mock function with given fields:
func (_m *Store) MarkSystemRanUnitTests() {
	_m.Called()
}

// NotifyAdmin provides a mock function with given fields:
func (_m *Store) NotifyAdmin() store.NotifyAdminStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotifyAdmin")
	}

	var r0 store.NotifyAdminStore
	if rf, ok := ret.Get(0).(func() store.NotifyAdminStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.NotifyAdminStore)
		}
	}

	return r0
}

// OAuth provides a mock function with given fields:
func (_m *Store) OAuth() store.OAuthStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OAuth")
	}

	var r0 store.OAuthStore
	if rf, ok := ret.Get(0).(func() store.OAuthStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.OAuthStore)
		}
	}

	return r0
}

// OutgoingOAuthConnection provides a mock function with given fields:
func (_m *Store) OutgoingOAuthConnection() store.OutgoingOAuthConnectionStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OutgoingOAuthConnection")
	}

	var r0 store.OutgoingOAuthConnectionStore
	if rf, ok := ret.Get(0).(func() store.OutgoingOAuthConnectionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.OutgoingOAuthConnectionStore)
		}
	}

	return r0
}

// Plugin provides a mock function with given fields:
func (_m *Store) Plugin() store.PluginStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Plugin")
	}

	var r0 store.PluginStore
	if rf, ok := ret.Get(0).(func() store.PluginStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PluginStore)
		}
	}

	return r0
}

// Post provides a mock function with given fields:
func (_m *Store) Post() store.PostStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 store.PostStore
	if rf, ok := ret.Get(0).(func() store.PostStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PostStore)
		}
	}

	return r0
}

// PostAcknowledgement provides a mock function with given fields:
func (_m *Store) PostAcknowledgement() store.PostAcknowledgementStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostAcknowledgement")
	}

	var r0 store.PostAcknowledgementStore
	if rf, ok := ret.Get(0).(func() store.PostAcknowledgementStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PostAcknowledgementStore)
		}
	}

	return r0
}

// PostPersistentNotification provides a mock function with given fields:
func (_m *Store) PostPersistentNotification() store.PostPersistentNotificationStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostPersistentNotification")
	}

	var r0 store.PostPersistentNotificationStore
	if rf, ok := ret.Get(0).(func() store.PostPersistentNotificationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PostPersistentNotificationStore)
		}
	}

	return r0
}

// PostPriority provides a mock function with given fields:
func (_m *Store) PostPriority() store.PostPriorityStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostPriority")
	}

	var r0 store.PostPriorityStore
	if rf, ok := ret.Get(0).(func() store.PostPriorityStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PostPriorityStore)
		}
	}

	return r0
}

// Preference provides a mock function with given fields:
func (_m *Store) Preference() store.PreferenceStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Preference")
	}

	var r0 store.PreferenceStore
	if rf, ok := ret.Get(0).(func() store.PreferenceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PreferenceStore)
		}
	}

	return r0
}

// ProductNotices provides a mock function with given fields:
func (_m *Store) ProductNotices() store.ProductNoticesStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProductNotices")
	}

	var r0 store.ProductNoticesStore
	if rf, ok := ret.Get(0).(func() store.ProductNoticesStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductNoticesStore)
		}
	}

	return r0
}

// Reaction provides a mock function with given fields:
func (_m *Store) Reaction() store.ReactionStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reaction")
	}

	var r0 store.ReactionStore
	if rf, ok := ret.Get(0).(func() store.ReactionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ReactionStore)
		}
	}

	return r0
}

// RecycleDBConnections provides a mock function with given fields: d
func (_m *Store) RecycleDBConnections(d time.Duration) {
	_m.Called(d)
}

// RemoteCluster provides a mock function with given fields:
func (_m *Store) RemoteCluster() store.RemoteClusterStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteCluster")
	}

	var r0 store.RemoteClusterStore
	if rf, ok := ret.Get(0).(func() store.RemoteClusterStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.RemoteClusterStore)
		}
	}

	return r0
}

// ReplicaLagAbs provides a mock function with given fields:
func (_m *Store) ReplicaLagAbs() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReplicaLagAbs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicaLagTime provides a mock function with given fields:
func (_m *Store) ReplicaLagTime() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReplicaLagTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetentionPolicy provides a mock function with given fields:
func (_m *Store) RetentionPolicy() store.RetentionPolicyStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RetentionPolicy")
	}

	var r0 store.RetentionPolicyStore
	if rf, ok := ret.Get(0).(func() store.RetentionPolicyStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.RetentionPolicyStore)
		}
	}

	return r0
}

// Role provides a mock function with given fields:
func (_m *Store) Role() store.RoleStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 store.RoleStore
	if rf, ok := ret.Get(0).(func() store.RoleStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.RoleStore)
		}
	}

	return r0
}

// ScheduledPost provides a mock function with given fields:
func (_m *Store) ScheduledPost() store.ScheduledPostStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScheduledPost")
	}

	var r0 store.ScheduledPostStore
	if rf, ok := ret.Get(0).(func() store.ScheduledPostStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ScheduledPostStore)
		}
	}

	return r0
}

// Scheme provides a mock function with given fields:
func (_m *Store) Scheme() store.SchemeStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 store.SchemeStore
	if rf, ok := ret.Get(0).(func() store.SchemeStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SchemeStore)
		}
	}

	return r0
}

// Session provides a mock function with given fields:
func (_m *Store) Session() store.SessionStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Session")
	}

	var r0 store.SessionStore
	if rf, ok := ret.Get(0).(func() store.SessionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SessionStore)
		}
	}

	return r0
}

// SetContext provides a mock function with given fields: _a0
func (_m *Store) SetContext(_a0 context.Context) {
	_m.Called(_a0)
}

// SharedChannel provides a mock function with given fields:
func (_m *Store) SharedChannel() store.SharedChannelStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SharedChannel")
	}

	var r0 store.SharedChannelStore
	if rf, ok := ret.Get(0).(func() store.SharedChannelStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SharedChannelStore)
		}
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Store) Status() store.StatusStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 store.StatusStore
	if rf, ok := ret.Get(0).(func() store.StatusStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StatusStore)
		}
	}

	return r0
}

// System provides a mock function with given fields:
func (_m *Store) System() store.SystemStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for System")
	}

	var r0 store.SystemStore
	if rf, ok := ret.Get(0).(func() store.SystemStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SystemStore)
		}
	}

	return r0
}

// Team provides a mock function with given fields:
func (_m *Store) Team() store.TeamStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Team")
	}

	var r0 store.TeamStore
	if rf, ok := ret.Get(0).(func() store.TeamStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TeamStore)
		}
	}

	return r0
}

// TermsOfService provides a mock function with given fields:
func (_m *Store) TermsOfService() store.TermsOfServiceStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TermsOfService")
	}

	var r0 store.TermsOfServiceStore
	if rf, ok := ret.Get(0).(func() store.TermsOfServiceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TermsOfServiceStore)
		}
	}

	return r0
}

// Thread provides a mock function with given fields:
func (_m *Store) Thread() store.ThreadStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Thread")
	}

	var r0 store.ThreadStore
	if rf, ok := ret.Get(0).(func() store.ThreadStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ThreadStore)
		}
	}

	return r0
}

// Token provides a mock function with given fields:
func (_m *Store) Token() store.TokenStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 store.TokenStore
	if rf, ok := ret.Get(0).(func() store.TokenStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TokenStore)
		}
	}

	return r0
}

// TotalMasterDbConnections provides a mock function with given fields:
func (_m *Store) TotalMasterDbConnections() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalMasterDbConnections")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TotalReadDbConnections provides a mock function with given fields:
func (_m *Store) TotalReadDbConnections() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalReadDbConnections")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TotalSearchDbConnections provides a mock function with given fields:
func (_m *Store) TotalSearchDbConnections() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalSearchDbConnections")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UnlockFromMaster provides a mock function with given fields:
func (_m *Store) UnlockFromMaster() {
	_m.Called()
}

// UploadSession provides a mock function with given fields:
func (_m *Store) UploadSession() store.UploadSessionStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UploadSession")
	}

	var r0 store.UploadSessionStore
	if rf, ok := ret.Get(0).(func() store.UploadSessionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UploadSessionStore)
		}
	}

	return r0
}

// User provides a mock function with given fields:
func (_m *Store) User() store.UserStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 store.UserStore
	if rf, ok := ret.Get(0).(func() store.UserStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserStore)
		}
	}

	return r0
}

// UserAccessToken provides a mock function with given fields:
func (_m *Store) UserAccessToken() store.UserAccessTokenStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserAccessToken")
	}

	var r0 store.UserAccessTokenStore
	if rf, ok := ret.Get(0).(func() store.UserAccessTokenStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserAccessTokenStore)
		}
	}

	return r0
}

// UserTermsOfService provides a mock function with given fields:
func (_m *Store) UserTermsOfService() store.UserTermsOfServiceStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserTermsOfService")
	}

	var r0 store.UserTermsOfServiceStore
	if rf, ok := ret.Get(0).(func() store.UserTermsOfServiceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserTermsOfServiceStore)
		}
	}

	return r0
}

// Webhook provides a mock function with given fields:
func (_m *Store) Webhook() store.WebhookStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Webhook")
	}

	var r0 store.WebhookStore
	if rf, ok := ret.Get(0).(func() store.WebhookStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.WebhookStore)
		}
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
