// Code generated by mockery v2.53.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// DraftStore is an autogenerated mock type for the DraftStore type
type DraftStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userID, channelID, rootID
func (_m *DraftStore) Delete(userID string, channelID string, rootID string) error {
	ret := _m.Called(userID, channelID, rootID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, channelID, rootID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDraftsAssociatedWithPost provides a mock function with given fields: channelID, rootID
func (_m *DraftStore) DeleteDraftsAssociatedWithPost(channelID string, rootID string) error {
	ret := _m.Called(channelID, rootID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDraftsAssociatedWithPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(channelID, rootID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEmptyDraftsByCreateAtAndUserId provides a mock function with given fields: createAt, userID
func (_m *DraftStore) DeleteEmptyDraftsByCreateAtAndUserId(createAt int64, userID string) error {
	ret := _m.Called(createAt, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmptyDraftsByCreateAtAndUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(createAt, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrphanDraftsByCreateAtAndUserId provides a mock function with given fields: createAt, userID
func (_m *DraftStore) DeleteOrphanDraftsByCreateAtAndUserId(createAt int64, userID string) error {
	ret := _m.Called(createAt, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrphanDraftsByCreateAtAndUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(createAt, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePageDraft provides a mock function with given fields: userId, wikiId, draftId
func (_m *DraftStore) DeletePageDraft(userId string, wikiId string, draftId string) error {
	ret := _m.Called(userId, wikiId, draftId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePageDraft")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userId, wikiId, draftId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: userID, channelID, rootID, includeDeleted
func (_m *DraftStore) Get(userID string, channelID string, rootID string, includeDeleted bool) (*model.Draft, error) {
	ret := _m.Called(userID, channelID, rootID, includeDeleted)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Draft
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool) (*model.Draft, error)); ok {
		return rf(userID, channelID, rootID, includeDeleted)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, bool) *model.Draft); ok {
		r0 = rf(userID, channelID, rootID, includeDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Draft)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, bool) error); ok {
		r1 = rf(userID, channelID, rootID, includeDeleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDraftsForUser provides a mock function with given fields: userID, teamID
func (_m *DraftStore) GetDraftsForUser(userID string, teamID string) ([]*model.Draft, error) {
	ret := _m.Called(userID, teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetDraftsForUser")
	}

	var r0 []*model.Draft
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*model.Draft, error)); ok {
		return rf(userID, teamID)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*model.Draft); ok {
		r0 = rf(userID, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Draft)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastCreateAtAndUserIdValuesForEmptyDraftsMigration provides a mock function with given fields: createAt, userID
func (_m *DraftStore) GetLastCreateAtAndUserIdValuesForEmptyDraftsMigration(createAt int64, userID string) (int64, string, error) {
	ret := _m.Called(createAt, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastCreateAtAndUserIdValuesForEmptyDraftsMigration")
	}

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, string) (int64, string, error)); ok {
		return rf(createAt, userID)
	}
	if rf, ok := ret.Get(0).(func(int64, string) int64); ok {
		r0 = rf(createAt, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, string) string); ok {
		r1 = rf(createAt, userID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(int64, string) error); ok {
		r2 = rf(createAt, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPageDraft provides a mock function with given fields: userId, wikiId, draftId
func (_m *DraftStore) GetPageDraft(userId string, wikiId string, draftId string) (*model.Draft, error) {
	ret := _m.Called(userId, wikiId, draftId)

	if len(ret) == 0 {
		panic("no return value specified for GetPageDraft")
	}

	var r0 *model.Draft
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.Draft, error)); ok {
		return rf(userId, wikiId, draftId)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Draft); ok {
		r0 = rf(userId, wikiId, draftId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Draft)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(userId, wikiId, draftId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPageDraftsForWiki provides a mock function with given fields: userId, wikiId
func (_m *DraftStore) GetPageDraftsForWiki(userId string, wikiId string) ([]*model.Draft, error) {
	ret := _m.Called(userId, wikiId)

	if len(ret) == 0 {
		panic("no return value specified for GetPageDraftsForWiki")
	}

	var r0 []*model.Draft
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*model.Draft, error)); ok {
		return rf(userId, wikiId)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*model.Draft); ok {
		r0 = rf(userId, wikiId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Draft)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, wikiId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PermanentDeleteByUser provides a mock function with given fields: userId
func (_m *DraftStore) PermanentDeleteByUser(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for PermanentDeleteByUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: d
func (_m *DraftStore) Upsert(d *model.Draft) (*model.Draft, error) {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 *model.Draft
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Draft) (*model.Draft, error)); ok {
		return rf(d)
	}
	if rf, ok := ret.Get(0).(func(*model.Draft) *model.Draft); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Draft)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Draft) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPageDraft provides a mock function with given fields: userId, wikiId, draftId, message
func (_m *DraftStore) UpsertPageDraft(userId string, wikiId string, draftId string, message string) (*model.Draft, error) {
	ret := _m.Called(userId, wikiId, draftId, message)

	if len(ret) == 0 {
		panic("no return value specified for UpsertPageDraft")
	}

	var r0 *model.Draft
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*model.Draft, error)); ok {
		return rf(userId, wikiId, draftId, message)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *model.Draft); ok {
		r0 = rf(userId, wikiId, draftId, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Draft)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(userId, wikiId, draftId, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertPageDraftWithMetadata provides a mock function with given fields: userId, wikiId, draftId, message, title, pageId, props
func (_m *DraftStore) UpsertPageDraftWithMetadata(userId string, wikiId string, draftId string, message string, title string, pageId string, props map[string]interface{}) (*model.Draft, error) {
	ret := _m.Called(userId, wikiId, draftId, message, title, pageId, props)

	if len(ret) == 0 {
		panic("no return value specified for UpsertPageDraftWithMetadata")
	}

	var r0 *model.Draft
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, map[string]interface{}) (*model.Draft, error)); ok {
		return rf(userId, wikiId, draftId, message, title, pageId, props)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, map[string]interface{}) *model.Draft); ok {
		r0 = rf(userId, wikiId, draftId, message, title, pageId, props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Draft)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, map[string]interface{}) error); ok {
		r1 = rf(userId, wikiId, draftId, message, title, pageId, props)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDraftStore creates a new instance of DraftStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDraftStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DraftStore {
	mock := &DraftStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
