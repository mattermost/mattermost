// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// LinkMetadataStore is an autogenerated mock type for the LinkMetadataStore type
type LinkMetadataStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: url, timestamp
func (_m *LinkMetadataStore) Get(url string, timestamp int64) (*model.LinkMetadata, error) {
	ret := _m.Called(url, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.LinkMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64) (*model.LinkMetadata, error)); ok {
		return rf(url, timestamp)
	}
	if rf, ok := ret.Get(0).(func(string, int64) *model.LinkMetadata); ok {
		r0 = rf(url, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LinkMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(url, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: linkMetadata
func (_m *LinkMetadataStore) Save(linkMetadata *model.LinkMetadata) (*model.LinkMetadata, error) {
	ret := _m.Called(linkMetadata)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *model.LinkMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.LinkMetadata) (*model.LinkMetadata, error)); ok {
		return rf(linkMetadata)
	}
	if rf, ok := ret.Get(0).(func(*model.LinkMetadata) *model.LinkMetadata); ok {
		r0 = rf(linkMetadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LinkMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.LinkMetadata) error); ok {
		r1 = rf(linkMetadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLinkMetadataStore creates a new instance of LinkMetadataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLinkMetadataStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *LinkMetadataStore {
	mock := &LinkMetadataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
