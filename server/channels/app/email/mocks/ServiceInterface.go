// Code generated by mockery v2.42.2. DO NOT EDIT.

// Regenerate this file using `make email-mocks`.

package mocks

import (
	io "io"

	i18n "github.com/mattermost/mattermost/server/public/shared/i18n"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mattermost/mattermost/server/public/model"

	store "github.com/mattermost/mattermost/server/v8/channels/store"

	templates "github.com/mattermost/mattermost/server/v8/platform/shared/templates"

	throttled "github.com/throttled/throttled"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

// AddNotificationEmailToBatch provides a mock function with given fields: user, post, team
func (_m *ServiceInterface) AddNotificationEmailToBatch(user *model.User, post *model.Post, team *model.Team) *model.AppError {
	ret := _m.Called(user, post, team)

	if len(ret) == 0 {
		panic("no return value specified for AddNotificationEmailToBatch")
	}

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User, *model.Post, *model.Team) *model.AppError); ok {
		r0 = rf(user, post, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// CreateVerifyEmailToken provides a mock function with given fields: userID, newEmail
func (_m *ServiceInterface) CreateVerifyEmailToken(userID string, newEmail string) (*model.Token, error) {
	ret := _m.Called(userID, newEmail)

	if len(ret) == 0 {
		panic("no return value specified for CreateVerifyEmailToken")
	}

	var r0 *model.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.Token, error)); ok {
		return rf(userID, newEmail)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Token); ok {
		r0 = rf(userID, newEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, newEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateHyperlinkForChannels provides a mock function with given fields: postMessage, teamName, teamURL
func (_m *ServiceInterface) GenerateHyperlinkForChannels(postMessage string, teamName string, teamURL string) (string, error) {
	ret := _m.Called(postMessage, teamName, teamURL)

	if len(ret) == 0 {
		panic("no return value specified for GenerateHyperlinkForChannels")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(postMessage, teamName, teamURL)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(postMessage, teamName, teamURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(postMessage, teamName, teamURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageForNotification provides a mock function with given fields: post, teamName, siteUrl, translateFunc
func (_m *ServiceInterface) GetMessageForNotification(post *model.Post, teamName string, siteUrl string, translateFunc i18n.TranslateFunc) string {
	ret := _m.Called(post, teamName, siteUrl, translateFunc)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageForNotification")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*model.Post, string, string, i18n.TranslateFunc) string); ok {
		r0 = rf(post, teamName, siteUrl, translateFunc)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPerDayEmailRateLimiter provides a mock function with given fields:
func (_m *ServiceInterface) GetPerDayEmailRateLimiter() *throttled.GCRARateLimiter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPerDayEmailRateLimiter")
	}

	var r0 *throttled.GCRARateLimiter
	if rf, ok := ret.Get(0).(func() *throttled.GCRARateLimiter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*throttled.GCRARateLimiter)
		}
	}

	return r0
}

// InitEmailBatching provides a mock function with given fields:
func (_m *ServiceInterface) InitEmailBatching() {
	_m.Called()
}

// NewEmailTemplateData provides a mock function with given fields: locale
func (_m *ServiceInterface) NewEmailTemplateData(locale string) templates.Data {
	ret := _m.Called(locale)

	if len(ret) == 0 {
		panic("no return value specified for NewEmailTemplateData")
	}

	var r0 templates.Data
	if rf, ok := ret.Get(0).(func(string) templates.Data); ok {
		r0 = rf(locale)
	} else {
		r0 = ret.Get(0).(templates.Data)
	}

	return r0
}

// SendChangeUsernameEmail provides a mock function with given fields: newUsername, _a1, locale, siteURL
func (_m *ServiceInterface) SendChangeUsernameEmail(newUsername string, _a1 string, locale string, siteURL string) error {
	ret := _m.Called(newUsername, _a1, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendChangeUsernameEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(newUsername, _a1, locale, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendCloudWelcomeEmail provides a mock function with given fields: userEmail, locale, teamInviteID, workSpaceName, dns, siteURL
func (_m *ServiceInterface) SendCloudWelcomeEmail(userEmail string, locale string, teamInviteID string, workSpaceName string, dns string, siteURL string) error {
	ret := _m.Called(userEmail, locale, teamInviteID, workSpaceName, dns, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendCloudWelcomeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) error); ok {
		r0 = rf(userEmail, locale, teamInviteID, workSpaceName, dns, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendDeactivateAccountEmail provides a mock function with given fields: _a0, locale, siteURL
func (_m *ServiceInterface) SendDeactivateAccountEmail(_a0 string, locale string, siteURL string) error {
	ret := _m.Called(_a0, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendDeactivateAccountEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(_a0, locale, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailChangeEmail provides a mock function with given fields: oldEmail, newEmail, locale, siteURL
func (_m *ServiceInterface) SendEmailChangeEmail(oldEmail string, newEmail string, locale string, siteURL string) error {
	ret := _m.Called(oldEmail, newEmail, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailChangeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(oldEmail, newEmail, locale, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailChangeVerifyEmail provides a mock function with given fields: newUserEmail, locale, siteURL, token
func (_m *ServiceInterface) SendEmailChangeVerifyEmail(newUserEmail string, locale string, siteURL string, token string) error {
	ret := _m.Called(newUserEmail, locale, siteURL, token)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailChangeVerifyEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(newUserEmail, locale, siteURL, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendGuestInviteEmails provides a mock function with given fields: team, channels, senderName, senderUserId, senderProfileImage, invites, siteURL, message, errorWhenNotSent, isSystemAdmin, isFirstAdmin
func (_m *ServiceInterface) SendGuestInviteEmails(team *model.Team, channels []*model.Channel, senderName string, senderUserId string, senderProfileImage []byte, invites []string, siteURL string, message string, errorWhenNotSent bool, isSystemAdmin bool, isFirstAdmin bool) error {
	ret := _m.Called(team, channels, senderName, senderUserId, senderProfileImage, invites, siteURL, message, errorWhenNotSent, isSystemAdmin, isFirstAdmin)

	if len(ret) == 0 {
		panic("no return value specified for SendGuestInviteEmails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Team, []*model.Channel, string, string, []byte, []string, string, string, bool, bool, bool) error); ok {
		r0 = rf(team, channels, senderName, senderUserId, senderProfileImage, invites, siteURL, message, errorWhenNotSent, isSystemAdmin, isFirstAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendIPFiltersChangedEmail provides a mock function with given fields: _a0, userWhoChangedFilter, siteURL, portalURL, locale, isWorkspaceOwner
func (_m *ServiceInterface) SendIPFiltersChangedEmail(_a0 string, userWhoChangedFilter *model.User, siteURL string, portalURL string, locale string, isWorkspaceOwner bool) error {
	ret := _m.Called(_a0, userWhoChangedFilter, siteURL, portalURL, locale, isWorkspaceOwner)

	if len(ret) == 0 {
		panic("no return value specified for SendIPFiltersChangedEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.User, string, string, string, bool) error); ok {
		r0 = rf(_a0, userWhoChangedFilter, siteURL, portalURL, locale, isWorkspaceOwner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendInviteEmails provides a mock function with given fields: team, senderName, senderUserId, invites, siteURL, reminderData, errorWhenNotSent, isSystemAdmin, isFirstAdmin
func (_m *ServiceInterface) SendInviteEmails(team *model.Team, senderName string, senderUserId string, invites []string, siteURL string, reminderData *model.TeamInviteReminderData, errorWhenNotSent bool, isSystemAdmin bool, isFirstAdmin bool) error {
	ret := _m.Called(team, senderName, senderUserId, invites, siteURL, reminderData, errorWhenNotSent, isSystemAdmin, isFirstAdmin)

	if len(ret) == 0 {
		panic("no return value specified for SendInviteEmails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Team, string, string, []string, string, *model.TeamInviteReminderData, bool, bool, bool) error); ok {
		r0 = rf(team, senderName, senderUserId, invites, siteURL, reminderData, errorWhenNotSent, isSystemAdmin, isFirstAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendInviteEmailsToTeamAndChannels provides a mock function with given fields: team, channels, senderName, senderUserId, senderProfileImage, invites, siteURL, reminderData, message, errorWhenNotSent, isSystemAdmin, isFirstAdmin
func (_m *ServiceInterface) SendInviteEmailsToTeamAndChannels(team *model.Team, channels []*model.Channel, senderName string, senderUserId string, senderProfileImage []byte, invites []string, siteURL string, reminderData *model.TeamInviteReminderData, message string, errorWhenNotSent bool, isSystemAdmin bool, isFirstAdmin bool) ([]*model.EmailInviteWithError, error) {
	ret := _m.Called(team, channels, senderName, senderUserId, senderProfileImage, invites, siteURL, reminderData, message, errorWhenNotSent, isSystemAdmin, isFirstAdmin)

	if len(ret) == 0 {
		panic("no return value specified for SendInviteEmailsToTeamAndChannels")
	}

	var r0 []*model.EmailInviteWithError
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Team, []*model.Channel, string, string, []byte, []string, string, *model.TeamInviteReminderData, string, bool, bool, bool) ([]*model.EmailInviteWithError, error)); ok {
		return rf(team, channels, senderName, senderUserId, senderProfileImage, invites, siteURL, reminderData, message, errorWhenNotSent, isSystemAdmin, isFirstAdmin)
	}
	if rf, ok := ret.Get(0).(func(*model.Team, []*model.Channel, string, string, []byte, []string, string, *model.TeamInviteReminderData, string, bool, bool, bool) []*model.EmailInviteWithError); ok {
		r0 = rf(team, channels, senderName, senderUserId, senderProfileImage, invites, siteURL, reminderData, message, errorWhenNotSent, isSystemAdmin, isFirstAdmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EmailInviteWithError)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Team, []*model.Channel, string, string, []byte, []string, string, *model.TeamInviteReminderData, string, bool, bool, bool) error); ok {
		r1 = rf(team, channels, senderName, senderUserId, senderProfileImage, invites, siteURL, reminderData, message, errorWhenNotSent, isSystemAdmin, isFirstAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendLicenseUpForRenewalEmail provides a mock function with given fields: _a0, name, locale, siteURL, ctaTitle, ctaLink, ctaText, daysToExpiration
func (_m *ServiceInterface) SendLicenseUpForRenewalEmail(_a0 string, name string, locale string, siteURL string, ctaTitle string, ctaLink string, ctaText string, daysToExpiration int) error {
	ret := _m.Called(_a0, name, locale, siteURL, ctaTitle, ctaLink, ctaText, daysToExpiration)

	if len(ret) == 0 {
		panic("no return value specified for SendLicenseUpForRenewalEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, int) error); ok {
		r0 = rf(_a0, name, locale, siteURL, ctaTitle, ctaLink, ctaText, daysToExpiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMailWithEmbeddedFiles provides a mock function with given fields: to, subject, htmlBody, embeddedFiles, messageID, inReplyTo, references, category
func (_m *ServiceInterface) SendMailWithEmbeddedFiles(to string, subject string, htmlBody string, embeddedFiles map[string]io.Reader, messageID string, inReplyTo string, references string, category string) error {
	ret := _m.Called(to, subject, htmlBody, embeddedFiles, messageID, inReplyTo, references, category)

	if len(ret) == 0 {
		panic("no return value specified for SendMailWithEmbeddedFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, map[string]io.Reader, string, string, string, string) error); ok {
		r0 = rf(to, subject, htmlBody, embeddedFiles, messageID, inReplyTo, references, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMfaChangeEmail provides a mock function with given fields: _a0, activated, locale, siteURL
func (_m *ServiceInterface) SendMfaChangeEmail(_a0 string, activated bool, locale string, siteURL string) error {
	ret := _m.Called(_a0, activated, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendMfaChangeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, string, string) error); ok {
		r0 = rf(_a0, activated, locale, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendNotificationMail provides a mock function with given fields: to, subject, htmlBody
func (_m *ServiceInterface) SendNotificationMail(to string, subject string, htmlBody string) error {
	ret := _m.Called(to, subject, htmlBody)

	if len(ret) == 0 {
		panic("no return value specified for SendNotificationMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(to, subject, htmlBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendPasswordChangeEmail provides a mock function with given fields: _a0, method, locale, siteURL
func (_m *ServiceInterface) SendPasswordChangeEmail(_a0 string, method string, locale string, siteURL string) error {
	ret := _m.Called(_a0, method, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordChangeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(_a0, method, locale, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendPasswordResetEmail provides a mock function with given fields: _a0, token, locale, siteURL
func (_m *ServiceInterface) SendPasswordResetEmail(_a0 string, token *model.Token, locale string, siteURL string) (bool, error) {
	ret := _m.Called(_a0, token, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordResetEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Token, string, string) (bool, error)); ok {
		return rf(_a0, token, locale, siteURL)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Token, string, string) bool); ok {
		r0 = rf(_a0, token, locale, siteURL)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, *model.Token, string, string) error); ok {
		r1 = rf(_a0, token, locale, siteURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRemoveExpiredLicenseEmail provides a mock function with given fields: ctaText, ctaLink, _a2, locale, siteURL
func (_m *ServiceInterface) SendRemoveExpiredLicenseEmail(ctaText string, ctaLink string, _a2 string, locale string, siteURL string) error {
	ret := _m.Called(ctaText, ctaLink, _a2, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendRemoveExpiredLicenseEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(ctaText, ctaLink, _a2, locale, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendSignInChangeEmail provides a mock function with given fields: _a0, method, locale, siteURL
func (_m *ServiceInterface) SendSignInChangeEmail(_a0 string, method string, locale string, siteURL string) error {
	ret := _m.Called(_a0, method, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendSignInChangeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(_a0, method, locale, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendUserAccessTokenAddedEmail provides a mock function with given fields: _a0, locale, siteURL
func (_m *ServiceInterface) SendUserAccessTokenAddedEmail(_a0 string, locale string, siteURL string) error {
	ret := _m.Called(_a0, locale, siteURL)

	if len(ret) == 0 {
		panic("no return value specified for SendUserAccessTokenAddedEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(_a0, locale, siteURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendVerifyEmail provides a mock function with given fields: userEmail, locale, siteURL, token, redirect
func (_m *ServiceInterface) SendVerifyEmail(userEmail string, locale string, siteURL string, token string, redirect string) error {
	ret := _m.Called(userEmail, locale, siteURL, token, redirect)

	if len(ret) == 0 {
		panic("no return value specified for SendVerifyEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(userEmail, locale, siteURL, token, redirect)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendWelcomeEmail provides a mock function with given fields: userID, _a1, verified, disableWelcomeEmail, locale, siteURL, redirect
func (_m *ServiceInterface) SendWelcomeEmail(userID string, _a1 string, verified bool, disableWelcomeEmail bool, locale string, siteURL string, redirect string) error {
	ret := _m.Called(userID, _a1, verified, disableWelcomeEmail, locale, siteURL, redirect)

	if len(ret) == 0 {
		panic("no return value specified for SendWelcomeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, string, string, string) error); ok {
		r0 = rf(userID, _a1, verified, disableWelcomeEmail, locale, siteURL, redirect)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStore provides a mock function with given fields: st
func (_m *ServiceInterface) SetStore(st store.Store) {
	_m.Called(st)
}

// Stop provides a mock function with given fields:
func (_m *ServiceInterface) Stop() {
	_m.Called()
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
