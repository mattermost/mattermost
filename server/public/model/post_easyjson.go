// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel(in *jlexer.Lexer, out *SearchParameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "terms":
			if in.IsNull() {
				in.Skip()
				out.Terms = nil
			} else {
				if out.Terms == nil {
					out.Terms = new(string)
				}
				*out.Terms = string(in.String())
			}
		case "is_or_search":
			if in.IsNull() {
				in.Skip()
				out.IsOrSearch = nil
			} else {
				if out.IsOrSearch == nil {
					out.IsOrSearch = new(bool)
				}
				*out.IsOrSearch = bool(in.Bool())
			}
		case "time_zone_offset":
			if in.IsNull() {
				in.Skip()
				out.TimeZoneOffset = nil
			} else {
				if out.TimeZoneOffset == nil {
					out.TimeZoneOffset = new(int)
				}
				*out.TimeZoneOffset = int(in.Int())
			}
		case "page":
			if in.IsNull() {
				in.Skip()
				out.Page = nil
			} else {
				if out.Page == nil {
					out.Page = new(int)
				}
				*out.Page = int(in.Int())
			}
		case "per_page":
			if in.IsNull() {
				in.Skip()
				out.PerPage = nil
			} else {
				if out.PerPage == nil {
					out.PerPage = new(int)
				}
				*out.PerPage = int(in.Int())
			}
		case "include_deleted_channels":
			if in.IsNull() {
				in.Skip()
				out.IncludeDeletedChannels = nil
			} else {
				if out.IncludeDeletedChannels == nil {
					out.IncludeDeletedChannels = new(bool)
				}
				*out.IncludeDeletedChannels = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel(out *jwriter.Writer, in SearchParameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"terms\":"
		out.RawString(prefix[1:])
		if in.Terms == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Terms))
		}
	}
	{
		const prefix string = ",\"is_or_search\":"
		out.RawString(prefix)
		if in.IsOrSearch == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsOrSearch))
		}
	}
	{
		const prefix string = ",\"time_zone_offset\":"
		out.RawString(prefix)
		if in.TimeZoneOffset == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.TimeZoneOffset))
		}
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		if in.Page == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Page))
		}
	}
	{
		const prefix string = ",\"per_page\":"
		out.RawString(prefix)
		if in.PerPage == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.PerPage))
		}
	}
	{
		const prefix string = ",\"include_deleted_channels\":"
		out.RawString(prefix)
		if in.IncludeDeletedChannels == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IncludeDeletedChannels))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchParameter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchParameter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchParameter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchParameter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel1(in *jlexer.Lexer, out *ReplyForExport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "edit_at":
			out.EditAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "is_pinned":
			out.IsPinned = bool(in.Bool())
		case "user_id":
			out.UserId = string(in.String())
		case "channel_id":
			out.ChannelId = string(in.String())
		case "root_id":
			out.RootId = string(in.String())
		case "original_id":
			out.OriginalId = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "message_source":
			out.MessageSource = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "props":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Props = make(StringInterface)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Props)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hashtags":
			out.Hashtags = string(in.String())
		case "file_ids":
			if in.IsNull() {
				in.Skip()
				out.FileIds = nil
			} else {
				in.Delim('[')
				if out.FileIds == nil {
					if !in.IsDelim(']') {
						out.FileIds = make(StringArray, 0, 4)
					} else {
						out.FileIds = StringArray{}
					}
				} else {
					out.FileIds = (out.FileIds)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.FileIds = append(out.FileIds, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pending_post_id":
			out.PendingPostId = string(in.String())
		case "has_reactions":
			out.HasReactions = bool(in.Bool())
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "reply_count":
			out.ReplyCount = int64(in.Int64())
		case "last_reply_at":
			out.LastReplyAt = int64(in.Int64())
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]*User, 0, 8)
					} else {
						out.Participants = []*User{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *User
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(User)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel2(in, v3)
					}
					out.Participants = append(out.Participants, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_following":
			if in.IsNull() {
				in.Skip()
				out.IsFollowing = nil
			} else {
				if out.IsFollowing == nil {
					out.IsFollowing = new(bool)
				}
				*out.IsFollowing = bool(in.Bool())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(PostMetadata)
				}
				easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel3(in, out.Metadata)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel1(out *jwriter.Writer, in ReplyForExport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"edit_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.EditAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"root_id\":"
		out.RawString(prefix)
		out.String(string(in.RootId))
	}
	{
		const prefix string = ",\"original_id\":"
		out.RawString(prefix)
		out.String(string(in.OriginalId))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.MessageSource != "" {
		const prefix string = ",\"message_source\":"
		out.RawString(prefix)
		out.String(string(in.MessageSource))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"props\":"
		out.RawString(prefix)
		out.Raw((in.Props).MarshalJSON())
	}
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix)
		out.String(string(in.Hashtags))
	}
	if len(in.FileIds) != 0 {
		const prefix string = ",\"file_ids\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v4, v5 := range in.FileIds {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pending_post_id\":"
		out.RawString(prefix)
		out.String(string(in.PendingPostId))
	}
	if in.HasReactions {
		const prefix string = ",\"has_reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasReactions))
	}
	if in.RemoteId != nil {
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		out.String(string(*in.RemoteId))
	}
	{
		const prefix string = ",\"reply_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReplyCount))
	}
	{
		const prefix string = ",\"last_reply_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastReplyAt))
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Participants {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel2(out, *v7)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsFollowing != nil {
		const prefix string = ",\"is_following\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsFollowing))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel3(out, *in.Metadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplyForExport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplyForExport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplyForExport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplyForExport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel1(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel3(in *jlexer.Lexer, out *PostMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "embeds":
			if in.IsNull() {
				in.Skip()
				out.Embeds = nil
			} else {
				in.Delim('[')
				if out.Embeds == nil {
					if !in.IsDelim(']') {
						out.Embeds = make([]*PostEmbed, 0, 8)
					} else {
						out.Embeds = []*PostEmbed{}
					}
				} else {
					out.Embeds = (out.Embeds)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *PostEmbed
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(PostEmbed)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel4(in, v8)
					}
					out.Embeds = append(out.Embeds, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "emojis":
			if in.IsNull() {
				in.Skip()
				out.Emojis = nil
			} else {
				in.Delim('[')
				if out.Emojis == nil {
					if !in.IsDelim(']') {
						out.Emojis = make([]*Emoji, 0, 8)
					} else {
						out.Emojis = []*Emoji{}
					}
				} else {
					out.Emojis = (out.Emojis)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *Emoji
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(Emoji)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel5(in, v9)
					}
					out.Emojis = append(out.Emojis, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]*FileInfo, 0, 8)
					} else {
						out.Files = []*FileInfo{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *FileInfo
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(FileInfo)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel6(in, v10)
					}
					out.Files = append(out.Files, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Images = make(map[string]*PostImage)
				} else {
					out.Images = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 *PostImage
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(PostImage)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel7(in, v11)
					}
					(out.Images)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]*Reaction, 0, 8)
					} else {
						out.Reactions = []*Reaction{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v12 *Reaction
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(Reaction)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel8(in, v12)
					}
					out.Reactions = append(out.Reactions, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(PostPriority)
				}
				(*out.Priority).UnmarshalEasyJSON(in)
			}
		case "acknowledgements":
			if in.IsNull() {
				in.Skip()
				out.Acknowledgements = nil
			} else {
				in.Delim('[')
				if out.Acknowledgements == nil {
					if !in.IsDelim(']') {
						out.Acknowledgements = make([]*PostAcknowledgement, 0, 8)
					} else {
						out.Acknowledgements = []*PostAcknowledgement{}
					}
				} else {
					out.Acknowledgements = (out.Acknowledgements)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *PostAcknowledgement
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(PostAcknowledgement)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel9(in, v13)
					}
					out.Acknowledgements = append(out.Acknowledgements, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel3(out *jwriter.Writer, in PostMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Embeds) != 0 {
		const prefix string = ",\"embeds\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v14, v15 := range in.Embeds {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel4(out, *v15)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Emojis) != 0 {
		const prefix string = ",\"emojis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Emojis {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel5(out, *v17)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Files) != 0 {
		const prefix string = ",\"files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Files {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel6(out, *v19)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Images) != 0 {
		const prefix string = ",\"images\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Images {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				if v20Value == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel7(out, *v20Value)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Reactions) != 0 {
		const prefix string = ",\"reactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Reactions {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel8(out, *v22)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Priority).MarshalEasyJSON(out)
	}
	if len(in.Acknowledgements) != 0 {
		const prefix string = ",\"acknowledgements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Acknowledgements {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel9(out, *v24)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel9(in *jlexer.Lexer, out *PostAcknowledgement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = string(in.String())
		case "post_id":
			out.PostId = string(in.String())
		case "acknowledged_at":
			out.AcknowledgedAt = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel9(out *jwriter.Writer, in PostAcknowledgement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix)
		out.String(string(in.PostId))
	}
	{
		const prefix string = ",\"acknowledged_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.AcknowledgedAt))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel8(in *jlexer.Lexer, out *Reaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = string(in.String())
		case "post_id":
			out.PostId = string(in.String())
		case "emoji_name":
			out.EmojiName = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "channel_id":
			out.ChannelId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel8(out *jwriter.Writer, in Reaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix)
		out.String(string(in.PostId))
	}
	{
		const prefix string = ",\"emoji_name\":"
		out.RawString(prefix)
		out.String(string(in.EmojiName))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		if in.RemoteId == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RemoteId))
		}
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel7(in *jlexer.Lexer, out *PostImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "format":
			out.Format = string(in.String())
		case "frame_count":
			out.FrameCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel7(out *jwriter.Writer, in PostImage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"frame_count\":"
		out.RawString(prefix)
		out.Int(int(in.FrameCount))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel6(in *jlexer.Lexer, out *FileInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "user_id":
			out.CreatorId = string(in.String())
		case "post_id":
			out.PostId = string(in.String())
		case "channel_id":
			out.ChannelId = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "extension":
			out.Extension = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "has_preview_image":
			out.HasPreviewImage = bool(in.Bool())
		case "mini_preview":
			if in.IsNull() {
				in.Skip()
				out.MiniPreview = nil
			} else {
				if out.MiniPreview == nil {
					out.MiniPreview = new([]uint8)
				}
				if in.IsNull() {
					in.Skip()
					*out.MiniPreview = nil
				} else {
					*out.MiniPreview = in.Bytes()
				}
			}
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "archived":
			out.Archived = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel6(out *jwriter.Writer, in FileInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.CreatorId))
	}
	if in.PostId != "" {
		const prefix string = ",\"post_id\":"
		out.RawString(prefix)
		out.String(string(in.PostId))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"extension\":"
		out.RawString(prefix)
		out.String(string(in.Extension))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"mime_type\":"
		out.RawString(prefix)
		out.String(string(in.MimeType))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	if in.HasPreviewImage {
		const prefix string = ",\"has_preview_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPreviewImage))
	}
	{
		const prefix string = ",\"mini_preview\":"
		out.RawString(prefix)
		if in.MiniPreview == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.MiniPreview)
		}
	}
	{
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		if in.RemoteId == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RemoteId))
		}
	}
	{
		const prefix string = ",\"archived\":"
		out.RawString(prefix)
		out.Bool(bool(in.Archived))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel5(in *jlexer.Lexer, out *Emoji) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "creator_id":
			out.CreatorId = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel5(out *jwriter.Writer, in Emoji) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"creator_id\":"
		out.RawString(prefix)
		out.String(string(in.CreatorId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel4(in *jlexer.Lexer, out *PostEmbed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = PostEmbedType(in.String())
		case "url":
			out.URL = string(in.String())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel4(out *jwriter.Writer, in PostEmbed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "auth_data":
			if in.IsNull() {
				in.Skip()
				out.AuthData = nil
			} else {
				if out.AuthData == nil {
					out.AuthData = new(string)
				}
				*out.AuthData = string(in.String())
			}
		case "auth_service":
			out.AuthService = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "email_verified":
			out.EmailVerified = bool(in.Bool())
		case "nickname":
			out.Nickname = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "position":
			out.Position = string(in.String())
		case "roles":
			out.Roles = string(in.String())
		case "allow_marketing":
			out.AllowMarketing = bool(in.Bool())
		case "props":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Props = make(StringMap)
				} else {
					out.Props = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v28 string
					v28 = string(in.String())
					(out.Props)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		case "notify_props":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NotifyProps = make(StringMap)
				} else {
					out.NotifyProps = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 string
					v29 = string(in.String())
					(out.NotifyProps)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "last_password_update":
			out.LastPasswordUpdate = int64(in.Int64())
		case "last_picture_update":
			out.LastPictureUpdate = int64(in.Int64())
		case "failed_attempts":
			out.FailedAttempts = int(in.Int())
		case "locale":
			out.Locale = string(in.String())
		case "timezone":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Timezone = make(StringMap)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v30 string
					v30 = string(in.String())
					(out.Timezone)[key] = v30
					in.WantComma()
				}
				in.Delim('}')
			}
		case "mfa_active":
			out.MfaActive = bool(in.Bool())
		case "mfa_secret":
			out.MfaSecret = string(in.String())
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "last_activity_at":
			out.LastActivityAt = int64(in.Int64())
		case "is_bot":
			out.IsBot = bool(in.Bool())
		case "bot_description":
			out.BotDescription = string(in.String())
		case "bot_last_icon_update":
			out.BotLastIconUpdate = int64(in.Int64())
		case "terms_of_service_id":
			out.TermsOfServiceId = string(in.String())
		case "terms_of_service_create_at":
			out.TermsOfServiceCreateAt = int64(in.Int64())
		case "disable_welcome_email":
			out.DisableWelcomeEmail = bool(in.Bool())
		case "last_login":
			out.LastLogin = int64(in.Int64())
		case "mfa_used_timestamps":
			if in.IsNull() {
				in.Skip()
				out.MfaUsedTimestamps = nil
			} else {
				in.Delim('[')
				if out.MfaUsedTimestamps == nil {
					if !in.IsDelim(']') {
						out.MfaUsedTimestamps = make(StringArray, 0, 4)
					} else {
						out.MfaUsedTimestamps = StringArray{}
					}
				} else {
					out.MfaUsedTimestamps = (out.MfaUsedTimestamps)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.MfaUsedTimestamps = append(out.MfaUsedTimestamps, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.CreateAt != 0 {
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	if in.UpdateAt != 0 {
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.AuthData != nil {
		const prefix string = ",\"auth_data\":"
		out.RawString(prefix)
		out.String(string(*in.AuthData))
	}
	{
		const prefix string = ",\"auth_service\":"
		out.RawString(prefix)
		out.String(string(in.AuthService))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	if in.EmailVerified {
		const prefix string = ",\"email_verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.EmailVerified))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		out.String(string(in.Roles))
	}
	if in.AllowMarketing {
		const prefix string = ",\"allow_marketing\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowMarketing))
	}
	if len(in.Props) != 0 {
		const prefix string = ",\"props\":"
		out.RawString(prefix)
		out.Raw((in.Props).MarshalJSON())
	}
	if len(in.NotifyProps) != 0 {
		const prefix string = ",\"notify_props\":"
		out.RawString(prefix)
		out.Raw((in.NotifyProps).MarshalJSON())
	}
	if in.LastPasswordUpdate != 0 {
		const prefix string = ",\"last_password_update\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastPasswordUpdate))
	}
	if in.LastPictureUpdate != 0 {
		const prefix string = ",\"last_picture_update\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastPictureUpdate))
	}
	if in.FailedAttempts != 0 {
		const prefix string = ",\"failed_attempts\":"
		out.RawString(prefix)
		out.Int(int(in.FailedAttempts))
	}
	{
		const prefix string = ",\"locale\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix)
		out.Raw((in.Timezone).MarshalJSON())
	}
	if in.MfaActive {
		const prefix string = ",\"mfa_active\":"
		out.RawString(prefix)
		out.Bool(bool(in.MfaActive))
	}
	if in.MfaSecret != "" {
		const prefix string = ",\"mfa_secret\":"
		out.RawString(prefix)
		out.String(string(in.MfaSecret))
	}
	if in.RemoteId != nil {
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		out.String(string(*in.RemoteId))
	}
	if in.LastActivityAt != 0 {
		const prefix string = ",\"last_activity_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastActivityAt))
	}
	if in.IsBot {
		const prefix string = ",\"is_bot\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBot))
	}
	if in.BotDescription != "" {
		const prefix string = ",\"bot_description\":"
		out.RawString(prefix)
		out.String(string(in.BotDescription))
	}
	if in.BotLastIconUpdate != 0 {
		const prefix string = ",\"bot_last_icon_update\":"
		out.RawString(prefix)
		out.Int64(int64(in.BotLastIconUpdate))
	}
	if in.TermsOfServiceId != "" {
		const prefix string = ",\"terms_of_service_id\":"
		out.RawString(prefix)
		out.String(string(in.TermsOfServiceId))
	}
	if in.TermsOfServiceCreateAt != 0 {
		const prefix string = ",\"terms_of_service_create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.TermsOfServiceCreateAt))
	}
	{
		const prefix string = ",\"disable_welcome_email\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisableWelcomeEmail))
	}
	if in.LastLogin != 0 {
		const prefix string = ",\"last_login\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastLogin))
	}
	if len(in.MfaUsedTimestamps) != 0 {
		const prefix string = ",\"mfa_used_timestamps\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.MfaUsedTimestamps {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel10(in *jlexer.Lexer, out *PostReminder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target_time":
			out.TargetTime = int64(in.Int64())
		case "PostId":
			out.PostId = string(in.String())
		case "UserId":
			out.UserId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel10(out *jwriter.Writer, in PostReminder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"target_time\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TargetTime))
	}
	if in.PostId != "" {
		const prefix string = ",\"PostId\":"
		out.RawString(prefix)
		out.String(string(in.PostId))
	}
	if in.UserId != "" {
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostReminder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostReminder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostReminder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostReminder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel10(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel11(in *jlexer.Lexer, out *PostPriority) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(string)
				}
				*out.Priority = string(in.String())
			}
		case "requested_ack":
			if in.IsNull() {
				in.Skip()
				out.RequestedAck = nil
			} else {
				if out.RequestedAck == nil {
					out.RequestedAck = new(bool)
				}
				*out.RequestedAck = bool(in.Bool())
			}
		case "persistent_notifications":
			if in.IsNull() {
				in.Skip()
				out.PersistentNotifications = nil
			} else {
				if out.PersistentNotifications == nil {
					out.PersistentNotifications = new(bool)
				}
				*out.PersistentNotifications = bool(in.Bool())
			}
		case "PostId":
			out.PostId = string(in.String())
		case "ChannelId":
			out.ChannelId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel11(out *jwriter.Writer, in PostPriority) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix[1:])
		if in.Priority == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Priority))
		}
	}
	{
		const prefix string = ",\"requested_ack\":"
		out.RawString(prefix)
		if in.RequestedAck == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.RequestedAck))
		}
	}
	{
		const prefix string = ",\"persistent_notifications\":"
		out.RawString(prefix)
		if in.PersistentNotifications == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.PersistentNotifications))
		}
	}
	if in.PostId != "" {
		const prefix string = ",\"PostId\":"
		out.RawString(prefix)
		out.String(string(in.PostId))
	}
	if in.ChannelId != "" {
		const prefix string = ",\"ChannelId\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostPriority) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostPriority) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostPriority) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostPriority) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel11(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel12(in *jlexer.Lexer, out *PostPersistentNotifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PostId":
			out.PostId = string(in.String())
		case "CreateAt":
			out.CreateAt = int64(in.Int64())
		case "LastSentAt":
			out.LastSentAt = int64(in.Int64())
		case "DeleteAt":
			out.DeleteAt = int64(in.Int64())
		case "SentCount":
			out.SentCount = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel12(out *jwriter.Writer, in PostPersistentNotifications) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PostId\":"
		out.RawString(prefix[1:])
		out.String(string(in.PostId))
	}
	{
		const prefix string = ",\"CreateAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"LastSentAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastSentAt))
	}
	{
		const prefix string = ",\"DeleteAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"SentCount\":"
		out.RawString(prefix)
		out.Int16(int16(in.SentCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostPersistentNotifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostPersistentNotifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostPersistentNotifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostPersistentNotifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel12(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel13(in *jlexer.Lexer, out *PostPatch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_pinned":
			if in.IsNull() {
				in.Skip()
				out.IsPinned = nil
			} else {
				if out.IsPinned == nil {
					out.IsPinned = new(bool)
				}
				*out.IsPinned = bool(in.Bool())
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(string)
				}
				*out.Message = string(in.String())
			}
		case "props":
			if in.IsNull() {
				in.Skip()
				out.Props = nil
			} else {
				if out.Props == nil {
					out.Props = new(StringInterface)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.Props = make(StringInterface)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v34 interface{}
						if m, ok := v34.(easyjson.Unmarshaler); ok {
							m.UnmarshalEasyJSON(in)
						} else if m, ok := v34.(json.Unmarshaler); ok {
							_ = m.UnmarshalJSON(in.Raw())
						} else {
							v34 = in.Interface()
						}
						(*out.Props)[key] = v34
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "file_ids":
			if in.IsNull() {
				in.Skip()
				out.FileIds = nil
			} else {
				if out.FileIds == nil {
					out.FileIds = new(StringArray)
				}
				if in.IsNull() {
					in.Skip()
					*out.FileIds = nil
				} else {
					in.Delim('[')
					if *out.FileIds == nil {
						if !in.IsDelim(']') {
							*out.FileIds = make(StringArray, 0, 4)
						} else {
							*out.FileIds = StringArray{}
						}
					} else {
						*out.FileIds = (*out.FileIds)[:0]
					}
					for !in.IsDelim(']') {
						var v35 string
						v35 = string(in.String())
						*out.FileIds = append(*out.FileIds, v35)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "has_reactions":
			if in.IsNull() {
				in.Skip()
				out.HasReactions = nil
			} else {
				if out.HasReactions == nil {
					out.HasReactions = new(bool)
				}
				*out.HasReactions = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel13(out *jwriter.Writer, in PostPatch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix[1:])
		if in.IsPinned == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsPinned))
		}
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		if in.Message == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Message))
		}
	}
	{
		const prefix string = ",\"props\":"
		out.RawString(prefix)
		if in.Props == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Props).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"file_ids\":"
		out.RawString(prefix)
		if in.FileIds == nil {
			out.RawString("null")
		} else {
			if *in.FileIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v36, v37 := range *in.FileIds {
					if v36 > 0 {
						out.RawByte(',')
					}
					out.String(string(v37))
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"has_reactions\":"
		out.RawString(prefix)
		if in.HasReactions == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.HasReactions))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostPatch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostPatch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostPatch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostPatch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel13(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel14(in *jlexer.Lexer, out *PostForIndexing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "team_id":
			out.TeamId = string(in.String())
		case "parent_create_at":
			if in.IsNull() {
				in.Skip()
				out.ParentCreateAt = nil
			} else {
				if out.ParentCreateAt == nil {
					out.ParentCreateAt = new(int64)
				}
				*out.ParentCreateAt = int64(in.Int64())
			}
		case "id":
			out.Id = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "edit_at":
			out.EditAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "is_pinned":
			out.IsPinned = bool(in.Bool())
		case "user_id":
			out.UserId = string(in.String())
		case "channel_id":
			out.ChannelId = string(in.String())
		case "root_id":
			out.RootId = string(in.String())
		case "original_id":
			out.OriginalId = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "message_source":
			out.MessageSource = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "props":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Props = make(StringInterface)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v38 interface{}
					if m, ok := v38.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v38.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v38 = in.Interface()
					}
					(out.Props)[key] = v38
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hashtags":
			out.Hashtags = string(in.String())
		case "file_ids":
			if in.IsNull() {
				in.Skip()
				out.FileIds = nil
			} else {
				in.Delim('[')
				if out.FileIds == nil {
					if !in.IsDelim(']') {
						out.FileIds = make(StringArray, 0, 4)
					} else {
						out.FileIds = StringArray{}
					}
				} else {
					out.FileIds = (out.FileIds)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.FileIds = append(out.FileIds, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pending_post_id":
			out.PendingPostId = string(in.String())
		case "has_reactions":
			out.HasReactions = bool(in.Bool())
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "reply_count":
			out.ReplyCount = int64(in.Int64())
		case "last_reply_at":
			out.LastReplyAt = int64(in.Int64())
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]*User, 0, 8)
					} else {
						out.Participants = []*User{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *User
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(User)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel2(in, v40)
					}
					out.Participants = append(out.Participants, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_following":
			if in.IsNull() {
				in.Skip()
				out.IsFollowing = nil
			} else {
				if out.IsFollowing == nil {
					out.IsFollowing = new(bool)
				}
				*out.IsFollowing = bool(in.Bool())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(PostMetadata)
				}
				easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel3(in, out.Metadata)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel14(out *jwriter.Writer, in PostForIndexing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"team_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.TeamId))
	}
	{
		const prefix string = ",\"parent_create_at\":"
		out.RawString(prefix)
		if in.ParentCreateAt == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.ParentCreateAt))
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"edit_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.EditAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"root_id\":"
		out.RawString(prefix)
		out.String(string(in.RootId))
	}
	{
		const prefix string = ",\"original_id\":"
		out.RawString(prefix)
		out.String(string(in.OriginalId))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.MessageSource != "" {
		const prefix string = ",\"message_source\":"
		out.RawString(prefix)
		out.String(string(in.MessageSource))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"props\":"
		out.RawString(prefix)
		out.Raw((in.Props).MarshalJSON())
	}
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix)
		out.String(string(in.Hashtags))
	}
	if len(in.FileIds) != 0 {
		const prefix string = ",\"file_ids\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v41, v42 := range in.FileIds {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pending_post_id\":"
		out.RawString(prefix)
		out.String(string(in.PendingPostId))
	}
	if in.HasReactions {
		const prefix string = ",\"has_reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasReactions))
	}
	if in.RemoteId != nil {
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		out.String(string(*in.RemoteId))
	}
	{
		const prefix string = ",\"reply_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReplyCount))
	}
	{
		const prefix string = ",\"last_reply_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastReplyAt))
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Participants {
				if v43 > 0 {
					out.RawByte(',')
				}
				if v44 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel2(out, *v44)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsFollowing != nil {
		const prefix string = ",\"is_following\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsFollowing))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel3(out, *in.Metadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostForIndexing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostForIndexing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostForIndexing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostForIndexing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel14(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel15(in *jlexer.Lexer, out *PostForExport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamName":
			out.TeamName = string(in.String())
		case "ChannelName":
			out.ChannelName = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "ReplyCount":
			out.ReplyCount = int(in.Int())
		case "id":
			out.Id = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "edit_at":
			out.EditAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "is_pinned":
			out.IsPinned = bool(in.Bool())
		case "user_id":
			out.UserId = string(in.String())
		case "channel_id":
			out.ChannelId = string(in.String())
		case "root_id":
			out.RootId = string(in.String())
		case "original_id":
			out.OriginalId = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "message_source":
			out.MessageSource = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "props":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Props = make(StringInterface)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v45 interface{}
					if m, ok := v45.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v45.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v45 = in.Interface()
					}
					(out.Props)[key] = v45
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hashtags":
			out.Hashtags = string(in.String())
		case "file_ids":
			if in.IsNull() {
				in.Skip()
				out.FileIds = nil
			} else {
				in.Delim('[')
				if out.FileIds == nil {
					if !in.IsDelim(']') {
						out.FileIds = make(StringArray, 0, 4)
					} else {
						out.FileIds = StringArray{}
					}
				} else {
					out.FileIds = (out.FileIds)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.FileIds = append(out.FileIds, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pending_post_id":
			out.PendingPostId = string(in.String())
		case "has_reactions":
			out.HasReactions = bool(in.Bool())
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "last_reply_at":
			out.LastReplyAt = int64(in.Int64())
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]*User, 0, 8)
					} else {
						out.Participants = []*User{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v47 *User
					if in.IsNull() {
						in.Skip()
						v47 = nil
					} else {
						if v47 == nil {
							v47 = new(User)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel2(in, v47)
					}
					out.Participants = append(out.Participants, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_following":
			if in.IsNull() {
				in.Skip()
				out.IsFollowing = nil
			} else {
				if out.IsFollowing == nil {
					out.IsFollowing = new(bool)
				}
				*out.IsFollowing = bool(in.Bool())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(PostMetadata)
				}
				easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel3(in, out.Metadata)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel15(out *jwriter.Writer, in PostForExport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamName\":"
		out.RawString(prefix[1:])
		out.String(string(in.TeamName))
	}
	{
		const prefix string = ",\"ChannelName\":"
		out.RawString(prefix)
		out.String(string(in.ChannelName))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"ReplyCount\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyCount))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"edit_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.EditAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"root_id\":"
		out.RawString(prefix)
		out.String(string(in.RootId))
	}
	{
		const prefix string = ",\"original_id\":"
		out.RawString(prefix)
		out.String(string(in.OriginalId))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.MessageSource != "" {
		const prefix string = ",\"message_source\":"
		out.RawString(prefix)
		out.String(string(in.MessageSource))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"props\":"
		out.RawString(prefix)
		out.Raw((in.Props).MarshalJSON())
	}
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix)
		out.String(string(in.Hashtags))
	}
	if len(in.FileIds) != 0 {
		const prefix string = ",\"file_ids\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v48, v49 := range in.FileIds {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pending_post_id\":"
		out.RawString(prefix)
		out.String(string(in.PendingPostId))
	}
	if in.HasReactions {
		const prefix string = ",\"has_reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasReactions))
	}
	if in.RemoteId != nil {
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		out.String(string(*in.RemoteId))
	}
	{
		const prefix string = ",\"last_reply_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastReplyAt))
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Participants {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel2(out, *v51)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsFollowing != nil {
		const prefix string = ",\"is_following\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsFollowing))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel3(out, *in.Metadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostForExport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostForExport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostForExport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostForExport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel15(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel16(in *jlexer.Lexer, out *PostEphemeral) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "post":
			if in.IsNull() {
				in.Skip()
				out.Post = nil
			} else {
				if out.Post == nil {
					out.Post = new(Post)
				}
				(*out.Post).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel16(out *jwriter.Writer, in PostEphemeral) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"post\":"
		out.RawString(prefix)
		if in.Post == nil {
			out.RawString("null")
		} else {
			(*in.Post).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostEphemeral) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostEphemeral) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostEphemeral) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostEphemeral) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel16(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel17(in *jlexer.Lexer, out *PostCountOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamId":
			out.TeamId = string(in.String())
		case "MustHaveFile":
			out.MustHaveFile = bool(in.Bool())
		case "MustHaveHashtag":
			out.MustHaveHashtag = bool(in.Bool())
		case "ExcludeDeleted":
			out.ExcludeDeleted = bool(in.Bool())
		case "ExcludeSystemPosts":
			out.ExcludeSystemPosts = bool(in.Bool())
		case "UsersPostsOnly":
			out.UsersPostsOnly = bool(in.Bool())
		case "AllowFromCache":
			out.AllowFromCache = bool(in.Bool())
		case "SincePostID":
			out.SincePostID = string(in.String())
		case "SinceUpdateAt":
			out.SinceUpdateAt = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel17(out *jwriter.Writer, in PostCountOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TeamId))
	}
	{
		const prefix string = ",\"MustHaveFile\":"
		out.RawString(prefix)
		out.Bool(bool(in.MustHaveFile))
	}
	{
		const prefix string = ",\"MustHaveHashtag\":"
		out.RawString(prefix)
		out.Bool(bool(in.MustHaveHashtag))
	}
	{
		const prefix string = ",\"ExcludeDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExcludeDeleted))
	}
	{
		const prefix string = ",\"ExcludeSystemPosts\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExcludeSystemPosts))
	}
	{
		const prefix string = ",\"UsersPostsOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsersPostsOnly))
	}
	{
		const prefix string = ",\"AllowFromCache\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowFromCache))
	}
	{
		const prefix string = ",\"SincePostID\":"
		out.RawString(prefix)
		out.String(string(in.SincePostID))
	}
	{
		const prefix string = ",\"SinceUpdateAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.SinceUpdateAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostCountOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostCountOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostCountOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostCountOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel17(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel18(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "edit_at":
			out.EditAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "is_pinned":
			out.IsPinned = bool(in.Bool())
		case "user_id":
			out.UserId = string(in.String())
		case "channel_id":
			out.ChannelId = string(in.String())
		case "root_id":
			out.RootId = string(in.String())
		case "original_id":
			out.OriginalId = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "message_source":
			out.MessageSource = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "props":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Props = make(StringInterface)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 interface{}
					if m, ok := v52.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v52.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v52 = in.Interface()
					}
					(out.Props)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hashtags":
			out.Hashtags = string(in.String())
		case "file_ids":
			if in.IsNull() {
				in.Skip()
				out.FileIds = nil
			} else {
				in.Delim('[')
				if out.FileIds == nil {
					if !in.IsDelim(']') {
						out.FileIds = make(StringArray, 0, 4)
					} else {
						out.FileIds = StringArray{}
					}
				} else {
					out.FileIds = (out.FileIds)[:0]
				}
				for !in.IsDelim(']') {
					var v53 string
					v53 = string(in.String())
					out.FileIds = append(out.FileIds, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pending_post_id":
			out.PendingPostId = string(in.String())
		case "has_reactions":
			out.HasReactions = bool(in.Bool())
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "reply_count":
			out.ReplyCount = int64(in.Int64())
		case "last_reply_at":
			out.LastReplyAt = int64(in.Int64())
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]*User, 0, 8)
					} else {
						out.Participants = []*User{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v54 *User
					if in.IsNull() {
						in.Skip()
						v54 = nil
					} else {
						if v54 == nil {
							v54 = new(User)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel2(in, v54)
					}
					out.Participants = append(out.Participants, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_following":
			if in.IsNull() {
				in.Skip()
				out.IsFollowing = nil
			} else {
				if out.IsFollowing == nil {
					out.IsFollowing = new(bool)
				}
				*out.IsFollowing = bool(in.Bool())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(PostMetadata)
				}
				easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel3(in, out.Metadata)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel18(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"edit_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.EditAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"root_id\":"
		out.RawString(prefix)
		out.String(string(in.RootId))
	}
	{
		const prefix string = ",\"original_id\":"
		out.RawString(prefix)
		out.String(string(in.OriginalId))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.MessageSource != "" {
		const prefix string = ",\"message_source\":"
		out.RawString(prefix)
		out.String(string(in.MessageSource))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"props\":"
		out.RawString(prefix)
		out.Raw((in.Props).MarshalJSON())
	}
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix)
		out.String(string(in.Hashtags))
	}
	if len(in.FileIds) != 0 {
		const prefix string = ",\"file_ids\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v55, v56 := range in.FileIds {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.String(string(v56))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pending_post_id\":"
		out.RawString(prefix)
		out.String(string(in.PendingPostId))
	}
	if in.HasReactions {
		const prefix string = ",\"has_reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasReactions))
	}
	if in.RemoteId != nil {
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		out.String(string(*in.RemoteId))
	}
	{
		const prefix string = ",\"reply_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReplyCount))
	}
	{
		const prefix string = ",\"last_reply_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastReplyAt))
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v57, v58 := range in.Participants {
				if v57 > 0 {
					out.RawByte(',')
				}
				if v58 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel2(out, *v58)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsFollowing != nil {
		const prefix string = ",\"is_following\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsFollowing))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel3(out, *in.Metadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Post) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Post) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel18(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel19(in *jlexer.Lexer, out *MoveThreadParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel19(out *jwriter.Writer, in MoveThreadParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChannelId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MoveThreadParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MoveThreadParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MoveThreadParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MoveThreadParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel19(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel20(in *jlexer.Lexer, out *GetPostsSinceOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserId":
			out.UserId = string(in.String())
		case "ChannelId":
			out.ChannelId = string(in.String())
		case "Time":
			out.Time = int64(in.Int64())
		case "SkipFetchThreads":
			out.SkipFetchThreads = bool(in.Bool())
		case "CollapsedThreads":
			out.CollapsedThreads = bool(in.Bool())
		case "CollapsedThreadsExtended":
			out.CollapsedThreadsExtended = bool(in.Bool())
		case "SortAscending":
			out.SortAscending = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel20(out *jwriter.Writer, in GetPostsSinceOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"ChannelId\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"SkipFetchThreads\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkipFetchThreads))
	}
	{
		const prefix string = ",\"CollapsedThreads\":"
		out.RawString(prefix)
		out.Bool(bool(in.CollapsedThreads))
	}
	{
		const prefix string = ",\"CollapsedThreadsExtended\":"
		out.RawString(prefix)
		out.Bool(bool(in.CollapsedThreadsExtended))
	}
	{
		const prefix string = ",\"SortAscending\":"
		out.RawString(prefix)
		out.Bool(bool(in.SortAscending))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPostsSinceOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPostsSinceOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPostsSinceOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPostsSinceOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel20(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel21(in *jlexer.Lexer, out *GetPostsSinceForSyncOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChannelId":
			out.ChannelId = string(in.String())
		case "ExcludeRemoteId":
			out.ExcludeRemoteId = string(in.String())
		case "IncludeDeleted":
			out.IncludeDeleted = bool(in.Bool())
		case "SinceCreateAt":
			out.SinceCreateAt = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel21(out *jwriter.Writer, in GetPostsSinceForSyncOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChannelId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"ExcludeRemoteId\":"
		out.RawString(prefix)
		out.String(string(in.ExcludeRemoteId))
	}
	{
		const prefix string = ",\"IncludeDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IncludeDeleted))
	}
	{
		const prefix string = ",\"SinceCreateAt\":"
		out.RawString(prefix)
		out.Bool(bool(in.SinceCreateAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPostsSinceForSyncOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPostsSinceForSyncOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPostsSinceForSyncOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPostsSinceForSyncOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel21(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel22(in *jlexer.Lexer, out *GetPostsSinceForSyncCursor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LastPostUpdateAt":
			out.LastPostUpdateAt = int64(in.Int64())
		case "LastPostUpdateID":
			out.LastPostUpdateID = string(in.String())
		case "LastPostCreateAt":
			out.LastPostCreateAt = int64(in.Int64())
		case "LastPostCreateID":
			out.LastPostCreateID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel22(out *jwriter.Writer, in GetPostsSinceForSyncCursor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"LastPostUpdateAt\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.LastPostUpdateAt))
	}
	{
		const prefix string = ",\"LastPostUpdateID\":"
		out.RawString(prefix)
		out.String(string(in.LastPostUpdateID))
	}
	{
		const prefix string = ",\"LastPostCreateAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastPostCreateAt))
	}
	{
		const prefix string = ",\"LastPostCreateID\":"
		out.RawString(prefix)
		out.String(string(in.LastPostCreateID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPostsSinceForSyncCursor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPostsSinceForSyncCursor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPostsSinceForSyncCursor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPostsSinceForSyncCursor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel22(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel23(in *jlexer.Lexer, out *GetPostsOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserId":
			out.UserId = string(in.String())
		case "ChannelId":
			out.ChannelId = string(in.String())
		case "PostId":
			out.PostId = string(in.String())
		case "Page":
			out.Page = int(in.Int())
		case "PerPage":
			out.PerPage = int(in.Int())
		case "SkipFetchThreads":
			out.SkipFetchThreads = bool(in.Bool())
		case "CollapsedThreads":
			out.CollapsedThreads = bool(in.Bool())
		case "CollapsedThreadsExtended":
			out.CollapsedThreadsExtended = bool(in.Bool())
		case "FromPost":
			out.FromPost = string(in.String())
		case "FromCreateAt":
			out.FromCreateAt = int64(in.Int64())
		case "Direction":
			out.Direction = string(in.String())
		case "IncludeDeleted":
			out.IncludeDeleted = bool(in.Bool())
		case "IncludePostPriority":
			out.IncludePostPriority = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel23(out *jwriter.Writer, in GetPostsOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"ChannelId\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"PostId\":"
		out.RawString(prefix)
		out.String(string(in.PostId))
	}
	{
		const prefix string = ",\"Page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"PerPage\":"
		out.RawString(prefix)
		out.Int(int(in.PerPage))
	}
	{
		const prefix string = ",\"SkipFetchThreads\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkipFetchThreads))
	}
	{
		const prefix string = ",\"CollapsedThreads\":"
		out.RawString(prefix)
		out.Bool(bool(in.CollapsedThreads))
	}
	{
		const prefix string = ",\"CollapsedThreadsExtended\":"
		out.RawString(prefix)
		out.Bool(bool(in.CollapsedThreadsExtended))
	}
	{
		const prefix string = ",\"FromPost\":"
		out.RawString(prefix)
		out.String(string(in.FromPost))
	}
	{
		const prefix string = ",\"FromCreateAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.FromCreateAt))
	}
	{
		const prefix string = ",\"Direction\":"
		out.RawString(prefix)
		out.String(string(in.Direction))
	}
	{
		const prefix string = ",\"IncludeDeleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IncludeDeleted))
	}
	{
		const prefix string = ",\"IncludePostPriority\":"
		out.RawString(prefix)
		out.Bool(bool(in.IncludePostPriority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPostsOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPostsOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPostsOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPostsOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel23(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel24(in *jlexer.Lexer, out *GetPersistentNotificationsPostsParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MaxTime":
			out.MaxTime = int64(in.Int64())
		case "MaxSentCount":
			out.MaxSentCount = int16(in.Int16())
		case "PerPage":
			out.PerPage = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel24(out *jwriter.Writer, in GetPersistentNotificationsPostsParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MaxTime\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.MaxTime))
	}
	{
		const prefix string = ",\"MaxSentCount\":"
		out.RawString(prefix)
		out.Int16(int16(in.MaxSentCount))
	}
	{
		const prefix string = ",\"PerPage\":"
		out.RawString(prefix)
		out.Int(int(in.PerPage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPersistentNotificationsPostsParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPersistentNotificationsPostsParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPersistentNotificationsPostsParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPersistentNotificationsPostsParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel24(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel25(in *jlexer.Lexer, out *FileForIndexing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ChannelId = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "user_id":
			out.CreatorId = string(in.String())
		case "post_id":
			out.PostId = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "extension":
			out.Extension = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "has_preview_image":
			out.HasPreviewImage = bool(in.Bool())
		case "mini_preview":
			if in.IsNull() {
				in.Skip()
				out.MiniPreview = nil
			} else {
				if out.MiniPreview == nil {
					out.MiniPreview = new([]uint8)
				}
				if in.IsNull() {
					in.Skip()
					*out.MiniPreview = nil
				} else {
					*out.MiniPreview = in.Bytes()
				}
			}
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "archived":
			out.Archived = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel25(out *jwriter.Writer, in FileForIndexing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.CreatorId))
	}
	if in.PostId != "" {
		const prefix string = ",\"post_id\":"
		out.RawString(prefix)
		out.String(string(in.PostId))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"extension\":"
		out.RawString(prefix)
		out.String(string(in.Extension))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"mime_type\":"
		out.RawString(prefix)
		out.String(string(in.MimeType))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	if in.HasPreviewImage {
		const prefix string = ",\"has_preview_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPreviewImage))
	}
	{
		const prefix string = ",\"mini_preview\":"
		out.RawString(prefix)
		if in.MiniPreview == nil {
			out.RawString("null")
		} else {
			out.Base64Bytes(*in.MiniPreview)
		}
	}
	{
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		if in.RemoteId == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RemoteId))
		}
	}
	{
		const prefix string = ",\"archived\":"
		out.RawString(prefix)
		out.Bool(bool(in.Archived))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileForIndexing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileForIndexing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileForIndexing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileForIndexing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel25(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel26(in *jlexer.Lexer, out *DirectPostForExport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "User":
			out.User = string(in.String())
		case "ChannelMembers":
			if in.IsNull() {
				in.Skip()
				out.ChannelMembers = nil
			} else {
				if out.ChannelMembers == nil {
					out.ChannelMembers = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.ChannelMembers = nil
				} else {
					in.Delim('[')
					if *out.ChannelMembers == nil {
						if !in.IsDelim(']') {
							*out.ChannelMembers = make([]string, 0, 4)
						} else {
							*out.ChannelMembers = []string{}
						}
					} else {
						*out.ChannelMembers = (*out.ChannelMembers)[:0]
					}
					for !in.IsDelim(']') {
						var v62 string
						v62 = string(in.String())
						*out.ChannelMembers = append(*out.ChannelMembers, v62)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "id":
			out.Id = string(in.String())
		case "create_at":
			out.CreateAt = int64(in.Int64())
		case "update_at":
			out.UpdateAt = int64(in.Int64())
		case "edit_at":
			out.EditAt = int64(in.Int64())
		case "delete_at":
			out.DeleteAt = int64(in.Int64())
		case "is_pinned":
			out.IsPinned = bool(in.Bool())
		case "user_id":
			out.UserId = string(in.String())
		case "channel_id":
			out.ChannelId = string(in.String())
		case "root_id":
			out.RootId = string(in.String())
		case "original_id":
			out.OriginalId = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "message_source":
			out.MessageSource = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "props":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Props = make(StringInterface)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v63 interface{}
					if m, ok := v63.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v63.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v63 = in.Interface()
					}
					(out.Props)[key] = v63
					in.WantComma()
				}
				in.Delim('}')
			}
		case "hashtags":
			out.Hashtags = string(in.String())
		case "file_ids":
			if in.IsNull() {
				in.Skip()
				out.FileIds = nil
			} else {
				in.Delim('[')
				if out.FileIds == nil {
					if !in.IsDelim(']') {
						out.FileIds = make(StringArray, 0, 4)
					} else {
						out.FileIds = StringArray{}
					}
				} else {
					out.FileIds = (out.FileIds)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					v64 = string(in.String())
					out.FileIds = append(out.FileIds, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pending_post_id":
			out.PendingPostId = string(in.String())
		case "has_reactions":
			out.HasReactions = bool(in.Bool())
		case "remote_id":
			if in.IsNull() {
				in.Skip()
				out.RemoteId = nil
			} else {
				if out.RemoteId == nil {
					out.RemoteId = new(string)
				}
				*out.RemoteId = string(in.String())
			}
		case "reply_count":
			out.ReplyCount = int64(in.Int64())
		case "last_reply_at":
			out.LastReplyAt = int64(in.Int64())
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]*User, 0, 8)
					} else {
						out.Participants = []*User{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v65 *User
					if in.IsNull() {
						in.Skip()
						v65 = nil
					} else {
						if v65 == nil {
							v65 = new(User)
						}
						easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel2(in, v65)
					}
					out.Participants = append(out.Participants, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_following":
			if in.IsNull() {
				in.Skip()
				out.IsFollowing = nil
			} else {
				if out.IsFollowing == nil {
					out.IsFollowing = new(bool)
				}
				*out.IsFollowing = bool(in.Bool())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(PostMetadata)
				}
				easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel3(in, out.Metadata)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel26(out *jwriter.Writer, in DirectPostForExport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"ChannelMembers\":"
		out.RawString(prefix)
		if in.ChannelMembers == nil {
			out.RawString("null")
		} else {
			if *in.ChannelMembers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v66, v67 := range *in.ChannelMembers {
					if v66 > 0 {
						out.RawByte(',')
					}
					out.String(string(v67))
				}
				out.RawByte(']')
			}
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"create_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreateAt))
	}
	{
		const prefix string = ",\"update_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateAt))
	}
	{
		const prefix string = ",\"edit_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.EditAt))
	}
	{
		const prefix string = ",\"delete_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeleteAt))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.String(string(in.ChannelId))
	}
	{
		const prefix string = ",\"root_id\":"
		out.RawString(prefix)
		out.String(string(in.RootId))
	}
	{
		const prefix string = ",\"original_id\":"
		out.RawString(prefix)
		out.String(string(in.OriginalId))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.MessageSource != "" {
		const prefix string = ",\"message_source\":"
		out.RawString(prefix)
		out.String(string(in.MessageSource))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"props\":"
		out.RawString(prefix)
		out.Raw((in.Props).MarshalJSON())
	}
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix)
		out.String(string(in.Hashtags))
	}
	if len(in.FileIds) != 0 {
		const prefix string = ",\"file_ids\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v68, v69 := range in.FileIds {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.String(string(v69))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pending_post_id\":"
		out.RawString(prefix)
		out.String(string(in.PendingPostId))
	}
	if in.HasReactions {
		const prefix string = ",\"has_reactions\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasReactions))
	}
	if in.RemoteId != nil {
		const prefix string = ",\"remote_id\":"
		out.RawString(prefix)
		out.String(string(*in.RemoteId))
	}
	{
		const prefix string = ",\"reply_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ReplyCount))
	}
	{
		const prefix string = ",\"last_reply_at\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastReplyAt))
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v70, v71 := range in.Participants {
				if v70 > 0 {
					out.RawByte(',')
				}
				if v71 == nil {
					out.RawString("null")
				} else {
					easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel2(out, *v71)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsFollowing != nil {
		const prefix string = ",\"is_following\":"
		out.RawString(prefix)
		out.Bool(bool(*in.IsFollowing))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel3(out, *in.Metadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DirectPostForExport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DirectPostForExport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DirectPostForExport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DirectPostForExport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel26(l, v)
}
func easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel27(in *jlexer.Lexer, out *AnalyticsPostCountsOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamId":
			out.TeamId = string(in.String())
		case "BotsOnly":
			out.BotsOnly = bool(in.Bool())
		case "YesterdayOnly":
			out.YesterdayOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel27(out *jwriter.Writer, in AnalyticsPostCountsOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TeamId))
	}
	{
		const prefix string = ",\"BotsOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.BotsOnly))
	}
	{
		const prefix string = ",\"YesterdayOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.YesterdayOnly))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnalyticsPostCountsOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnalyticsPostCountsOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubComMattermostMattermostServerPublicModel27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnalyticsPostCountsOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnalyticsPostCountsOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubComMattermostMattermostServerPublicModel27(l, v)
}
