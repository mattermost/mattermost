FROM ubuntu:jammy

# Setting bash as our shell, and enabling pipefail option
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Some ENV variables
ENV PATH="/mattermost/bin:${PATH}"
ARG VERSION=9.2.2

ARG PUID=2000
ARG PGID=2000
ARG MM_PACKAGE_ARM="https://releases.mattermost.com/${VERSION}/mattermost-${VERSION}-linux-arm64.tar.gz?src=docker"
ARG MM_PACKAGE_AMD="https://releases.mattermost.com/${VERSION}/mattermost-${VERSION}-linux-amd64.tar.gz?src=docker"

# Install needed packages and indirect dependencies
RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
  ca-certificates \
  curl \
  mime-support \
  unrtf \
  wv \
  poppler-utils \
  tidy \
  tzdata \
  && rm -rf /var/lib/apt/lists/*

# Set mattermost group/user and download Mattermost
RUN ARCH=$(dpkg --print-architecture) \
  && if [ "$ARCH" = "arm64" ]; then \
    mkdir -p /mattermost/data /mattermost/plugins /mattermost/client/plugins \
    && addgroup -gid ${PGID} mattermost \
    && adduser -q --disabled-password --uid ${PUID} --gid ${PGID} --gecos "" --home /mattermost mattermost \
    && if [ -n "$MM_PACKAGE_ARM" ]; then curl $MM_PACKAGE_ARM | tar -xvz ; \
    else echo "please set the MM_PACKAGE_ARM" ; exit 127 ; fi \
    && chown -R mattermost:mattermost /mattermost /mattermost/data /mattermost/plugins /mattermost/client/plugins; \
  elif [ "$ARCH" = "amd64" ]; then \
    mkdir -p /mattermost/data /mattermost/plugins /mattermost/client/plugins \
    && addgroup -gid ${PGID} mattermost \
    && adduser -q --disabled-password --uid ${PUID} --gid ${PGID} --gecos "" --home /mattermost mattermost \
    && if [ -n "$MM_PACKAGE_AMD" ]; then curl $MM_PACKAGE_AMD | tar -xvz ; \
    else echo "please set the MM_PACKAGE_AMD" ; exit 127 ; fi \
    && chown -R mattermost:mattermost /mattermost /mattermost/data /mattermost/plugins /mattermost/client/plugins; \
  else \
    echo "Unknown architecture: $ARCH" ; \
    exit 1; \
  fi

# We should refrain from running as privileged user
USER mattermost

# Healthcheck to make sure container is ready
HEALTHCHECK --interval=30s --timeout=10s \
  CMD curl -f http://localhost:8065/api/v4/system/ping || exit 1

# Configure entrypoint and command
COPY --chown=mattermost:mattermost --chmod=765 entrypoint.sh /
ENTRYPOINT ["/entrypoint.sh"]
WORKDIR /mattermost
CMD ["mattermost"]

EXPOSE 8065 8067 8074 8075

# Declare volumes for mount point directories
VOLUME ["/mattermost/data", "/mattermost/logs", "/mattermost/config", "/mattermost/plugins", "/mattermost/client/plugins"]
