name: mmctl CI
on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      datasource:
        required: true
        type: string
      drivername:
        required: true
        type: string
      logsartifact:
        required: true
        type: string

jobs:
  test:
    name: ${{ inputs.name }}
    runs-on: ubuntu-22.04
    env:
      COMPOSE_PROJECT_NAME: ghactions
      BUILD_IMAGE: mattermost/mattermost-build-server:1.21.8
    steps:
      - name: Checkout mattermost project
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Calculate Golang Version
        id: go
        working-directory: ./server
        run: echo GO_VERSION=$(cat .go-version) >> "${GITHUB_OUTPUT}"
      - name: Setup Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version: ${{ steps.go.outputs.GO_VERSION }}
          cache-dependency-path: server/go.sum
      - name: Run setup-go-work
        run: |
          cd server
          make setup-go-work
      - name: Setup needed prepackaged plugins
        run: |
          cd server
          make prepackaged-plugins PLUGIN_PACKAGES=mattermost-plugin-jira-v3.2.5
      - name: Run docker compose
        run: |
          cd server/build
          docker compose --ansi never run --rm start_dependencies
          cat ../tests/custom-schema-objectID.ldif | docker compose --ansi never exec -T openldap bash -c 'ldapadd -Y EXTERNAL -H ldapi:/// -w mostest || true';
          cat ../tests/test-data.ldif | docker compose --ansi never exec -T openldap bash -c 'ldapadd -x -D "cn=admin,dc=mm,dc=test,dc=com" -w mostest';
          docker compose --ansi never exec -T minio sh -c 'mkdir -p /data/mattermost-test';
          docker compose --ansi never ps
      - name: Run mmctl Tests
        run: |
          if [[ ${{ github.ref_name }} == 'master' ]]; then
            export TESTFLAGS="-timeout 90m -race"
          else
            export TESTFLAGS="-timeout 30m"
          fi
          docker run --net ghactions_mm-test \
            --ulimit nofile=8096:8096 \
            --env-file=server/build/dotenv/test.env \
            --env MM_SQLSETTINGS_DATASOURCE="${{ inputs.datasource }}" \
            --env MMCTL_TESTFLAGS="$TESTFLAGS" \
            -v $(go env GOCACHE):/go/cache \
            -e GOCACHE=/go/cache \
            -v $PWD:/mattermost \
            -w /mattermost/server \
            $BUILD_IMAGE \
            make test-mmctl BUILD_NUMBER=$GITHUB_HEAD_REF-$GITHUB_RUN_ID
      - name: Stop docker compose
        run: |
          cd server/build
          docker compose --ansi never stop
      - name: Archive logs
        if: ${{ always() }}
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ inputs.logsartifact }}
          path: |
            server/gotestsum.json
            server/report.xml
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@c0e4b81aaa0067314a2d0d06e19b512c9d8af4f5 # v3.7.7
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: server/report.xml
          check_name: ${{ inputs.name }} (Results)
          job_name: ${{ inputs.name }}
