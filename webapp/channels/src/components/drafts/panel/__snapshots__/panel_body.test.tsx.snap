// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/drafts/panel/panel_body should have called handleFormattedTextClick 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PanelBody
    channelId="channel_id"
    displayName="display_name"
    fileInfos={Array []}
    message="message"
    status="status"
    uploadsInProgress={Array []}
    userId="user_id"
    username="username"
  >
    <div
      className="DraftPanelBody post"
    >
      <div
        className="DraftPanelBody__left post__img"
      >
        <ProfilePicture
          channelId="channel_id"
          size="md"
          src="/api/v4/users/user_id/image?_=0"
          status="status"
          userId="user_id"
          username="username"
        >
          <ProfilePopoverController
            channelId="channel_id"
            src="/api/v4/users/user_id/image?_=0"
            triggerComponentClass="status-wrapper"
            userId="user_id"
          >
            <span
              aria-expanded="false"
              aria-haspopup="dialog"
              className="status-wrapper"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onPointerDown={[Function]}
            >
              <RoundButton
                className="style--none"
                size="md"
              >
                <button
                  className="RoundButton-dvlhqG gfRzmz style--none"
                  size="md"
                >
                  <span
                    className="profile-icon "
                  >
                    <Avatar
                      size="md"
                      url="/api/v4/users/user_id/image?_=0"
                      username="username"
                    >
                      <img
                        alt="username profile image"
                        className="Avatar Avatar-md"
                        loading="lazy"
                        onError={[Function]}
                        src="/api/v4/users/user_id/image?_=0"
                      />
                    </Avatar>
                  </span>
                </button>
              </RoundButton>
              <Memo(StatusIcon)
                status="status"
              >
                <StatusOfflineIcon
                  className="status "
                >
                  <span
                    className="status "
                  >
                    <svg
                      aria-label="Offline Icon"
                      className="offline--icon"
                      height="100%"
                      role="img"
                      style={
                        Object {
                          "clipRule": "evenodd",
                          "fillRule": "evenodd",
                          "strokeLinejoin": "round",
                          "strokeMiterlimit": 1.41421,
                        }
                      }
                      viewBox="0 0 20 20"
                      width="100%"
                    >
                      <path
                        d="M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm0,2c4.415,0 8,3.585 8,8c0,4.415 -3.585,8 -8,8c-4.415,0 -8,-3.585 -8,-8c0,-4.415 3.585,-8 8,-8Z"
                      />
                    </svg>
                  </span>
                </StatusOfflineIcon>
              </Memo(StatusIcon)>
            </span>
          </ProfilePopoverController>
        </ProfilePicture>
      </div>
      <div
        className="DraftPanelBody__post_body"
      >
        <Connect(ShowMore)
          text="message"
        >
          <ShowMore
            compactDisplay={false}
            dispatch={[Function]}
            isRHSExpanded={false}
            isRHSOpen={false}
            text="message"
          >
            <div
              className="post-message post-message--collapsed"
            >
              <div
                className="post-message__text-container"
                style={
                  Object {
                    "maxHeight": 600,
                  }
                }
              >
                <div
                  className="post__content"
                  onClick={[Function]}
                >
                  <div
                    className="DraftPanelBody__right"
                  >
                    <div
                      className="post__header"
                    >
                      <strong>
                        display_name
                      </strong>
                    </div>
                    <div
                      className="post__body"
                    >
                      <Connect(Markdown)
                        message="message"
                        options={
                          Object {
                            "disableGroupHighlight": true,
                            "mentionHighlight": false,
                          }
                        }
                      >
                        <Markdown
                          autolinkedUrlSchemes={
                            Array [
                              "http",
                              "https",
                              "ftp",
                              "mailto",
                              "tel",
                              "mattermost",
                            ]
                          }
                          channelNamesMap={Object {}}
                          dispatch={[Function]}
                          emojiMap={
                            EmojiMap {
                              "customEmojis": Map {},
                              "customEmojisArray": Array [],
                            }
                          }
                          enableFormatting={true}
                          hasImageProxy={false}
                          managedResourcePaths={Array []}
                          mentionKeys={Array []}
                          message="message"
                          minimumHashtagLength={NaN}
                          options={
                            Object {
                              "disableGroupHighlight": true,
                              "mentionHighlight": false,
                            }
                          }
                          siteURL="http://localhost:8065"
                          team={
                            Object {
                              "display_name": "Team ID",
                              "id": "team_id",
                              "name": "team-id",
                            }
                          }
                        >
                          <p
                            key="0"
                          >
                            message
                          </p>
                        </Markdown>
                      </Connect(Markdown)>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </ShowMore>
        </Connect(ShowMore)>
      </div>
    </div>
  </PanelBody>
</Provider>
`;

exports[`components/drafts/panel/panel_body should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PanelBody
    channelId="channel_id"
    displayName="display_name"
    fileInfos={Array []}
    message="message"
    status="status"
    uploadsInProgress={Array []}
    userId="user_id"
    username="username"
  >
    <div
      className="DraftPanelBody post"
    >
      <div
        className="DraftPanelBody__left post__img"
      >
        <ProfilePicture
          channelId="channel_id"
          size="md"
          src="/api/v4/users/user_id/image?_=0"
          status="status"
          userId="user_id"
          username="username"
        >
          <ProfilePopoverController
            channelId="channel_id"
            src="/api/v4/users/user_id/image?_=0"
            triggerComponentClass="status-wrapper"
            userId="user_id"
          >
            <span
              aria-expanded="false"
              aria-haspopup="dialog"
              className="status-wrapper"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onPointerDown={[Function]}
            >
              <RoundButton
                className="style--none"
                size="md"
              >
                <button
                  className="RoundButton-dvlhqG gfRzmz style--none"
                  size="md"
                >
                  <span
                    className="profile-icon "
                  >
                    <Avatar
                      size="md"
                      url="/api/v4/users/user_id/image?_=0"
                      username="username"
                    >
                      <img
                        alt="username profile image"
                        className="Avatar Avatar-md"
                        loading="lazy"
                        onError={[Function]}
                        src="/api/v4/users/user_id/image?_=0"
                      />
                    </Avatar>
                  </span>
                </button>
              </RoundButton>
              <Memo(StatusIcon)
                status="status"
              >
                <StatusOfflineIcon
                  className="status "
                >
                  <span
                    className="status "
                  >
                    <svg
                      aria-label="Offline Icon"
                      className="offline--icon"
                      height="100%"
                      role="img"
                      style={
                        Object {
                          "clipRule": "evenodd",
                          "fillRule": "evenodd",
                          "strokeLinejoin": "round",
                          "strokeMiterlimit": 1.41421,
                        }
                      }
                      viewBox="0 0 20 20"
                      width="100%"
                    >
                      <path
                        d="M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm0,2c4.415,0 8,3.585 8,8c0,4.415 -3.585,8 -8,8c-4.415,0 -8,-3.585 -8,-8c0,-4.415 3.585,-8 8,-8Z"
                      />
                    </svg>
                  </span>
                </StatusOfflineIcon>
              </Memo(StatusIcon)>
            </span>
          </ProfilePopoverController>
        </ProfilePicture>
      </div>
      <div
        className="DraftPanelBody__post_body"
      >
        <Connect(ShowMore)
          text="message"
        >
          <ShowMore
            compactDisplay={false}
            dispatch={[Function]}
            isRHSExpanded={false}
            isRHSOpen={false}
            text="message"
          >
            <div
              className="post-message post-message--collapsed"
            >
              <div
                className="post-message__text-container"
                style={
                  Object {
                    "maxHeight": 600,
                  }
                }
              >
                <div
                  className="post__content"
                  onClick={[Function]}
                >
                  <div
                    className="DraftPanelBody__right"
                  >
                    <div
                      className="post__header"
                    >
                      <strong>
                        display_name
                      </strong>
                    </div>
                    <div
                      className="post__body"
                    >
                      <Connect(Markdown)
                        message="message"
                        options={
                          Object {
                            "disableGroupHighlight": true,
                            "mentionHighlight": false,
                          }
                        }
                      >
                        <Markdown
                          autolinkedUrlSchemes={
                            Array [
                              "http",
                              "https",
                              "ftp",
                              "mailto",
                              "tel",
                              "mattermost",
                            ]
                          }
                          channelNamesMap={Object {}}
                          dispatch={[Function]}
                          emojiMap={
                            EmojiMap {
                              "customEmojis": Map {},
                              "customEmojisArray": Array [],
                            }
                          }
                          enableFormatting={true}
                          hasImageProxy={false}
                          managedResourcePaths={Array []}
                          mentionKeys={Array []}
                          message="message"
                          minimumHashtagLength={NaN}
                          options={
                            Object {
                              "disableGroupHighlight": true,
                              "mentionHighlight": false,
                            }
                          }
                          siteURL="http://localhost:8065"
                          team={
                            Object {
                              "display_name": "Team ID",
                              "id": "team_id",
                              "name": "team-id",
                            }
                          }
                        >
                          <p
                            key="0"
                          >
                            message
                          </p>
                        </Markdown>
                      </Connect(Markdown)>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </ShowMore>
        </Connect(ShowMore)>
      </div>
    </div>
  </PanelBody>
</Provider>
`;

exports[`components/drafts/panel/panel_body should match snapshot for priority 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PanelBody
    channelId="channel_id"
    displayName="display_name"
    fileInfos={Array []}
    message="message"
    priority={
      Object {
        "priority": "important",
        "requested_ack": false,
      }
    }
    status="status"
    uploadsInProgress={Array []}
    userId="user_id"
    username="username"
  >
    <div
      className="DraftPanelBody post"
    >
      <div
        className="DraftPanelBody__left post__img"
      >
        <ProfilePicture
          channelId="channel_id"
          size="md"
          src="/api/v4/users/user_id/image?_=0"
          status="status"
          userId="user_id"
          username="username"
        >
          <ProfilePopoverController
            channelId="channel_id"
            src="/api/v4/users/user_id/image?_=0"
            triggerComponentClass="status-wrapper"
            userId="user_id"
          >
            <span
              aria-expanded="false"
              aria-haspopup="dialog"
              className="status-wrapper"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onPointerDown={[Function]}
            >
              <RoundButton
                className="style--none"
                size="md"
              >
                <button
                  className="RoundButton-dvlhqG gfRzmz style--none"
                  size="md"
                >
                  <span
                    className="profile-icon "
                  >
                    <Avatar
                      size="md"
                      url="/api/v4/users/user_id/image?_=0"
                      username="username"
                    >
                      <img
                        alt="username profile image"
                        className="Avatar Avatar-md"
                        loading="lazy"
                        onError={[Function]}
                        src="/api/v4/users/user_id/image?_=0"
                      />
                    </Avatar>
                  </span>
                </button>
              </RoundButton>
              <Memo(StatusIcon)
                status="status"
              >
                <StatusOfflineIcon
                  className="status "
                >
                  <span
                    className="status "
                  >
                    <svg
                      aria-label="Offline Icon"
                      className="offline--icon"
                      height="100%"
                      role="img"
                      style={
                        Object {
                          "clipRule": "evenodd",
                          "fillRule": "evenodd",
                          "strokeLinejoin": "round",
                          "strokeMiterlimit": 1.41421,
                        }
                      }
                      viewBox="0 0 20 20"
                      width="100%"
                    >
                      <path
                        d="M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm0,2c4.415,0 8,3.585 8,8c0,4.415 -3.585,8 -8,8c-4.415,0 -8,-3.585 -8,-8c0,-4.415 3.585,-8 8,-8Z"
                      />
                    </svg>
                  </span>
                </StatusOfflineIcon>
              </Memo(StatusIcon)>
            </span>
          </ProfilePopoverController>
        </ProfilePicture>
      </div>
      <div
        className="DraftPanelBody__post_body"
      >
        <Connect(ShowMore)
          text="message"
        >
          <ShowMore
            compactDisplay={false}
            dispatch={[Function]}
            isRHSExpanded={false}
            isRHSOpen={false}
            text="message"
          >
            <div
              className="post-message post-message--collapsed"
            >
              <div
                className="post-message__text-container"
                style={
                  Object {
                    "maxHeight": 600,
                  }
                }
              >
                <div
                  className="post__content"
                  onClick={[Function]}
                >
                  <div
                    className="DraftPanelBody__right"
                  >
                    <div
                      className="post__header"
                    >
                      <strong>
                        display_name
                      </strong>
                      <Memo(PriorityLabels)
                        canRemove={false}
                        hasError={false}
                        priority="important"
                        requestedAck={false}
                      >
                        <div
                          className="priorityLabelsContainer"
                        >
                          <PriorityLabel
                            priority="important"
                            size="xs"
                          >
                            <Memo(Tag)
                              icon="alert-circle-outline"
                              size="xs"
                              text="Important"
                              uppercase={true}
                              variant="info"
                            >
                              <TagWrapper
                                as="div"
                                className="Tag Tag--info Tag--xs"
                                uppercase={true}
                              >
                                <div
                                  className="TagWrapper-keYggn gnIgwl Tag Tag--info Tag--xs"
                                >
                                  <AlertCircleOutlineIcon
                                    size={10}
                                  >
                                    <svg
                                      fill="currentColor"
                                      height={10}
                                      version="1.1"
                                      viewBox="0 0 24 24"
                                      width={10}
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        d="M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2 M12,20c-4.4,0-8-3.6-8-8s3.6-8,8-8s8,3.6,8,8S16.4,20,12,20z M12.501,13h-1l-0.5-6h2L12.501,13z M13,16c0,0.552-0.448,1-1,1s-1-0.448-1-1s0.448-1,1-1S13,15.448,13,16z"
                                      />
                                    </svg>
                                  </AlertCircleOutlineIcon>
                                  <TagText>
                                    <span
                                      className="TagText-bWgUzx kzWPbz"
                                    >
                                      Important
                                    </span>
                                  </TagText>
                                </div>
                              </TagWrapper>
                            </Memo(Tag)>
                          </PriorityLabel>
                        </div>
                      </Memo(PriorityLabels)>
                    </div>
                    <div
                      className="post__body"
                    >
                      <Connect(Markdown)
                        message="message"
                        options={
                          Object {
                            "disableGroupHighlight": true,
                            "mentionHighlight": false,
                          }
                        }
                      >
                        <Markdown
                          autolinkedUrlSchemes={
                            Array [
                              "http",
                              "https",
                              "ftp",
                              "mailto",
                              "tel",
                              "mattermost",
                            ]
                          }
                          channelNamesMap={Object {}}
                          dispatch={[Function]}
                          emojiMap={
                            EmojiMap {
                              "customEmojis": Map {},
                              "customEmojisArray": Array [],
                            }
                          }
                          enableFormatting={true}
                          hasImageProxy={false}
                          managedResourcePaths={Array []}
                          mentionKeys={Array []}
                          message="message"
                          minimumHashtagLength={NaN}
                          options={
                            Object {
                              "disableGroupHighlight": true,
                              "mentionHighlight": false,
                            }
                          }
                          siteURL="http://localhost:8065"
                          team={
                            Object {
                              "display_name": "Team ID",
                              "id": "team_id",
                              "name": "team-id",
                            }
                          }
                        >
                          <p
                            key="0"
                          >
                            message
                          </p>
                        </Markdown>
                      </Connect(Markdown)>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </ShowMore>
        </Connect(ShowMore)>
      </div>
    </div>
  </PanelBody>
</Provider>
`;

exports[`components/drafts/panel/panel_body should match snapshot for requested_ack 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <PanelBody
    channelId="channel_id"
    displayName="display_name"
    fileInfos={Array []}
    message="message"
    priority={
      Object {
        "priority": "",
        "requested_ack": true,
      }
    }
    status="status"
    uploadsInProgress={Array []}
    userId="user_id"
    username="username"
  >
    <div
      className="DraftPanelBody post"
    >
      <div
        className="DraftPanelBody__left post__img"
      >
        <ProfilePicture
          channelId="channel_id"
          size="md"
          src="/api/v4/users/user_id/image?_=0"
          status="status"
          userId="user_id"
          username="username"
        >
          <ProfilePopoverController
            channelId="channel_id"
            src="/api/v4/users/user_id/image?_=0"
            triggerComponentClass="status-wrapper"
            userId="user_id"
          >
            <span
              aria-expanded="false"
              aria-haspopup="dialog"
              className="status-wrapper"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onPointerDown={[Function]}
            >
              <RoundButton
                className="style--none"
                size="md"
              >
                <button
                  className="RoundButton-dvlhqG gfRzmz style--none"
                  size="md"
                >
                  <span
                    className="profile-icon "
                  >
                    <Avatar
                      size="md"
                      url="/api/v4/users/user_id/image?_=0"
                      username="username"
                    >
                      <img
                        alt="username profile image"
                        className="Avatar Avatar-md"
                        loading="lazy"
                        onError={[Function]}
                        src="/api/v4/users/user_id/image?_=0"
                      />
                    </Avatar>
                  </span>
                </button>
              </RoundButton>
              <Memo(StatusIcon)
                status="status"
              >
                <StatusOfflineIcon
                  className="status "
                >
                  <span
                    className="status "
                  >
                    <svg
                      aria-label="Offline Icon"
                      className="offline--icon"
                      height="100%"
                      role="img"
                      style={
                        Object {
                          "clipRule": "evenodd",
                          "fillRule": "evenodd",
                          "strokeLinejoin": "round",
                          "strokeMiterlimit": 1.41421,
                        }
                      }
                      viewBox="0 0 20 20"
                      width="100%"
                    >
                      <path
                        d="M10,0c5.519,0 10,4.481 10,10c0,5.519 -4.481,10 -10,10c-5.519,0 -10,-4.481 -10,-10c0,-5.519 4.481,-10 10,-10Zm0,2c4.415,0 8,3.585 8,8c0,4.415 -3.585,8 -8,8c-4.415,0 -8,-3.585 -8,-8c0,-4.415 3.585,-8 8,-8Z"
                      />
                    </svg>
                  </span>
                </StatusOfflineIcon>
              </Memo(StatusIcon)>
            </span>
          </ProfilePopoverController>
        </ProfilePicture>
      </div>
      <div
        className="DraftPanelBody__post_body"
      >
        <Connect(ShowMore)
          text="message"
        >
          <ShowMore
            compactDisplay={false}
            dispatch={[Function]}
            isRHSExpanded={false}
            isRHSOpen={false}
            text="message"
          >
            <div
              className="post-message post-message--collapsed"
            >
              <div
                className="post-message__text-container"
                style={
                  Object {
                    "maxHeight": 600,
                  }
                }
              >
                <div
                  className="post__content"
                  onClick={[Function]}
                >
                  <div
                    className="DraftPanelBody__right"
                  >
                    <div
                      className="post__header"
                    >
                      <strong>
                        display_name
                      </strong>
                      <Memo(PriorityLabels)
                        canRemove={false}
                        hasError={false}
                        priority=""
                        requestedAck={true}
                      >
                        <div
                          className="priorityLabelsContainer"
                        >
                          <div
                            className="priorityLabelsAcknowledgements"
                          >
                            <WithTooltip
                              title="Acknowledgement will be requested"
                            >
                              <span
                                className="icon icon-check-circle-outline"
                                onBlur={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseMove={[Function]}
                                onPointerDown={[Function]}
                                onPointerEnter={[Function]}
                              />
                            </WithTooltip>
                            <FormattedMessage
                              defaultMessage="Request acknowledgement"
                              id="post_priority.request_acknowledgement"
                            >
                              <span>
                                Request acknowledgement
                              </span>
                            </FormattedMessage>
                          </div>
                        </div>
                      </Memo(PriorityLabels)>
                    </div>
                    <div
                      className="post__body"
                    >
                      <Connect(Markdown)
                        message="message"
                        options={
                          Object {
                            "disableGroupHighlight": true,
                            "mentionHighlight": false,
                          }
                        }
                      >
                        <Markdown
                          autolinkedUrlSchemes={
                            Array [
                              "http",
                              "https",
                              "ftp",
                              "mailto",
                              "tel",
                              "mattermost",
                            ]
                          }
                          channelNamesMap={Object {}}
                          dispatch={[Function]}
                          emojiMap={
                            EmojiMap {
                              "customEmojis": Map {},
                              "customEmojisArray": Array [],
                            }
                          }
                          enableFormatting={true}
                          hasImageProxy={false}
                          managedResourcePaths={Array []}
                          mentionKeys={Array []}
                          message="message"
                          minimumHashtagLength={NaN}
                          options={
                            Object {
                              "disableGroupHighlight": true,
                              "mentionHighlight": false,
                            }
                          }
                          siteURL="http://localhost:8065"
                          team={
                            Object {
                              "display_name": "Team ID",
                              "id": "team_id",
                              "name": "team-id",
                            }
                          }
                        >
                          <p
                            key="0"
                          >
                            message
                          </p>
                        </Markdown>
                      </Connect(Markdown)>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </ShowMore>
        </Connect(ShowMore)>
      </div>
    </div>
  </PanelBody>
</Provider>
`;
