// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/channel_invite_modal should match snapshot for channel_invite_modal with profiles 1`] = `
<Modal
  animation={true}
  aria-labelledby="channelInviteModalLabel"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="a11y__modal channel-invite"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  id="addUsersToChannelModal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onExited={[MockFunction]}
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="none"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
    id="channelInviteModalLabel"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="deletePostModalLabel"
    >
      <MemoizedFormattedMessage
        defaultMessage="Add people to {channel}"
        id="channel_invite.addNewMembers"
        values={
          Object {
            "channel": "testing",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    className="overflow--visible"
    componentClass="div"
    role="application"
  >
    <div
      className="channel-invite__content"
    >
      <MultiSelect
        ariaLabelRenderer={[Function]}
        backButtonClass="btn-tertiary tertiary-button"
        backButtonClick={[Function]}
        backButtonText={
          Object {
            "defaultMessage": "Cancel",
            "id": "multiselect.cancel",
          }
        }
        buttonSubmitLoadingText={
          Object {
            "defaultMessage": "Adding...",
            "id": "multiselect.adding",
          }
        }
        buttonSubmitText={
          Object {
            "defaultMessage": "Add",
            "id": "multiselect.add",
          }
        }
        customNoOptionsMessage={null}
        focusOnLoad={true}
        handleAdd={[Function]}
        handleCancel={[Function]}
        handleDelete={[Function]}
        handleInput={[Function]}
        handlePageChange={[Function]}
        handleSubmit={[Function]}
        intl={
          Object {
            "$t": [Function],
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "defaultRichTextElements": undefined,
            "fallbackOnEmptyString": true,
            "formatDate": [Function],
            "formatDateTimeRange": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatListToParts": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "onWarn": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          }
        }
        key="addUsersToChannelKey"
        loading={true}
        optionRenderer={[Function]}
        options={Array []}
        perPage={50}
        placeholderText={
          Object {
            "defaultMessage": "Search for people or groups",
            "id": "multiselect.placeholder.peopleOrGroups",
          }
        }
        saveButtonPosition="bottom"
        saving={false}
        savingEnabled={true}
        selectedItemRef={
          Object {
            "current": null,
          }
        }
        valueWithImage={true}
        values={Array []}
      />
      <Memo(TeamWarningBanner)
        guests={Array []}
        teamId="eatxocwc3bg9ffo9xyybnj4omr"
        users={Array []}
      />
    </div>
  </ModalBody>
</Modal>
`;

exports[`components/channel_invite_modal should match snapshot for channel_invite_modal with profiles from DMs 1`] = `
<Modal
  animation={true}
  aria-labelledby="channelInviteModalLabel"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="a11y__modal channel-invite"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  id="addUsersToChannelModal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onExited={[MockFunction]}
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="none"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
    id="channelInviteModalLabel"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="deletePostModalLabel"
    >
      <MemoizedFormattedMessage
        defaultMessage="Add people to {channel}"
        id="channel_invite.addNewMembers"
        values={
          Object {
            "channel": "testing",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    className="overflow--visible"
    componentClass="div"
    role="application"
  >
    <div
      className="channel-invite__content"
    >
      <MultiSelect
        ariaLabelRenderer={[Function]}
        backButtonClass="btn-tertiary tertiary-button"
        backButtonClick={[Function]}
        backButtonText={
          Object {
            "defaultMessage": "Cancel",
            "id": "multiselect.cancel",
          }
        }
        buttonSubmitLoadingText={
          Object {
            "defaultMessage": "Adding...",
            "id": "multiselect.adding",
          }
        }
        buttonSubmitText={
          Object {
            "defaultMessage": "Add",
            "id": "multiselect.add",
          }
        }
        customNoOptionsMessage={null}
        focusOnLoad={true}
        handleAdd={[Function]}
        handleCancel={[Function]}
        handleDelete={[Function]}
        handleInput={[Function]}
        handlePageChange={[Function]}
        handleSubmit={[Function]}
        intl={
          Object {
            "$t": [Function],
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "defaultRichTextElements": undefined,
            "fallbackOnEmptyString": true,
            "formatDate": [Function],
            "formatDateTimeRange": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatListToParts": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "onWarn": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          }
        }
        key="addUsersToChannelKey"
        loading={true}
        optionRenderer={[Function]}
        options={Array []}
        perPage={50}
        placeholderText={
          Object {
            "defaultMessage": "Search for people or groups",
            "id": "multiselect.placeholder.peopleOrGroups",
          }
        }
        saveButtonPosition="bottom"
        saving={false}
        savingEnabled={true}
        selectedItemRef={
          Object {
            "current": null,
          }
        }
        valueWithImage={true}
        values={Array []}
      />
      <Memo(TeamWarningBanner)
        guests={Array []}
        teamId="eatxocwc3bg9ffo9xyybnj4omr"
        users={Array []}
      />
    </div>
  </ModalBody>
</Modal>
`;

exports[`components/channel_invite_modal should match snapshot for channel_invite_modal with userStatuses 1`] = `
<Memo(GroupOption)
  addUserProfile={[MockFunction]}
  group={
    Object {
      "delete_at": 0,
      "id": "user-1",
      "label": "user-1",
      "value": "user-1",
    }
  }
  isSelected={true}
  onMouseMove={[MockFunction]}
  rowSelected="more-modal__row--selected"
  selectedItemRef={
    Object {
      "current": null,
    }
  }
/>
`;

exports[`components/channel_invite_modal should match snapshot with exclude and include users 1`] = `
<Modal
  animation={true}
  aria-labelledby="channelInviteModalLabel"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="a11y__modal channel-invite"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  id="addUsersToChannelModal"
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onExited={[MockFunction]}
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="none"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
    id="channelInviteModalLabel"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="deletePostModalLabel"
    >
      <MemoizedFormattedMessage
        defaultMessage="Add people to {channel}"
        id="channel_invite.addNewMembers"
        values={
          Object {
            "channel": "testing",
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    className="overflow--visible"
    componentClass="div"
    role="application"
  >
    <div
      className="channel-invite__content"
    >
      <MultiSelect
        ariaLabelRenderer={[Function]}
        backButtonClass="btn-tertiary tertiary-button"
        backButtonClick={[Function]}
        backButtonText={
          Object {
            "defaultMessage": "Cancel",
            "id": "multiselect.cancel",
          }
        }
        buttonSubmitLoadingText={
          Object {
            "defaultMessage": "Adding...",
            "id": "multiselect.adding",
          }
        }
        buttonSubmitText={
          Object {
            "defaultMessage": "Add",
            "id": "multiselect.add",
          }
        }
        customNoOptionsMessage={null}
        focusOnLoad={true}
        handleAdd={[Function]}
        handleCancel={[Function]}
        handleDelete={[Function]}
        handleInput={[Function]}
        handlePageChange={[Function]}
        handleSubmit={[Function]}
        intl={
          Object {
            "$t": [Function],
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "defaultRichTextElements": undefined,
            "fallbackOnEmptyString": true,
            "formatDate": [Function],
            "formatDateTimeRange": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatListToParts": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "onWarn": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          }
        }
        key="addUsersToChannelKey"
        loading={true}
        optionRenderer={[Function]}
        options={Array []}
        perPage={50}
        placeholderText={
          Object {
            "defaultMessage": "Search for people or groups",
            "id": "multiselect.placeholder.peopleOrGroups",
          }
        }
        saveButtonPosition="bottom"
        saving={false}
        savingEnabled={true}
        selectedItemRef={
          Object {
            "current": null,
          }
        }
        valueWithImage={true}
        values={Array []}
      />
      <Memo(TeamWarningBanner)
        guests={Array []}
        teamId="eatxocwc3bg9ffo9xyybnj4omr"
        users={Array []}
      />
    </div>
  </ModalBody>
</Modal>
`;
