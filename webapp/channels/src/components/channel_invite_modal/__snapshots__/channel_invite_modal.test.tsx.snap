// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/channel_invite_modal should match snapshot for channel_invite_modal with profiles 1`] = `
<GenericModal
  bodyOverflowVisible={true}
  className="channel-invite"
  compassDesign={true}
  id="addUsersToChannelModal"
  modalHeaderText={
    <Memo(MemoizedFormattedMessage)
      defaultMessage="Add people to {channel}"
      id="channel_invite.addNewMembers"
      values={
        Object {
          "channel": "testing",
        }
      }
    />
  }
  onExited={[MockFunction]}
  onHide={[Function]}
  show={true}
>
  <div
    className="channel-invite__wrapper"
  >
    <div
      className="channel-invite__content"
    >
      <MultiSelect
        ariaLabelRenderer={[Function]}
        backButtonClass="btn-tertiary tertiary-button"
        backButtonClick={[Function]}
        backButtonText={
          Object {
            "defaultMessage": "Cancel",
            "id": "multiselect.cancel",
          }
        }
        buttonSubmitLoadingText={
          Object {
            "defaultMessage": "Adding...",
            "id": "multiselect.adding",
          }
        }
        buttonSubmitText={
          Object {
            "defaultMessage": "Add",
            "id": "multiselect.add",
          }
        }
        customNoOptionsMessage={null}
        focusOnLoad={true}
        handleAdd={[Function]}
        handleCancel={[Function]}
        handleDelete={[Function]}
        handleInput={[Function]}
        handlePageChange={[Function]}
        handleSubmit={[Function]}
        intl={
          Object {
            "$t": [Function],
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "defaultRichTextElements": undefined,
            "fallbackOnEmptyString": true,
            "formatDate": [Function],
            "formatDateTimeRange": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatListToParts": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "onWarn": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          }
        }
        key="addUsersToChannelKey"
        loading={true}
        optionRenderer={[Function]}
        options={Array []}
        perPage={50}
        placeholderText={
          Object {
            "defaultMessage": "Search for people or groups",
            "id": "multiselect.placeholder.peopleOrGroups",
          }
        }
        saveButtonPosition="bottom"
        saving={false}
        savingEnabled={true}
        selectedItemRef={
          Object {
            "current": null,
          }
        }
        valueWithImage={true}
        values={Array []}
      />
      <Memo(TeamWarningBanner)
        guests={Array []}
        teamId="eatxocwc3bg9ffo9xyybnj4omr"
        users={Array []}
      />
    </div>
  </div>
</GenericModal>
`;

exports[`components/channel_invite_modal should match snapshot for channel_invite_modal with profiles from DMs 1`] = `
<GenericModal
  bodyOverflowVisible={true}
  className="channel-invite"
  compassDesign={true}
  id="addUsersToChannelModal"
  modalHeaderText={
    <Memo(MemoizedFormattedMessage)
      defaultMessage="Add people to {channel}"
      id="channel_invite.addNewMembers"
      values={
        Object {
          "channel": "testing",
        }
      }
    />
  }
  onExited={[MockFunction]}
  onHide={[Function]}
  show={true}
>
  <div
    className="channel-invite__wrapper"
  >
    <div
      className="channel-invite__content"
    >
      <MultiSelect
        ariaLabelRenderer={[Function]}
        backButtonClass="btn-tertiary tertiary-button"
        backButtonClick={[Function]}
        backButtonText={
          Object {
            "defaultMessage": "Cancel",
            "id": "multiselect.cancel",
          }
        }
        buttonSubmitLoadingText={
          Object {
            "defaultMessage": "Adding...",
            "id": "multiselect.adding",
          }
        }
        buttonSubmitText={
          Object {
            "defaultMessage": "Add",
            "id": "multiselect.add",
          }
        }
        customNoOptionsMessage={null}
        focusOnLoad={true}
        handleAdd={[Function]}
        handleCancel={[Function]}
        handleDelete={[Function]}
        handleInput={[Function]}
        handlePageChange={[Function]}
        handleSubmit={[Function]}
        intl={
          Object {
            "$t": [Function],
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "defaultRichTextElements": undefined,
            "fallbackOnEmptyString": true,
            "formatDate": [Function],
            "formatDateTimeRange": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatListToParts": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "onWarn": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          }
        }
        key="addUsersToChannelKey"
        loading={true}
        optionRenderer={[Function]}
        options={Array []}
        perPage={50}
        placeholderText={
          Object {
            "defaultMessage": "Search for people or groups",
            "id": "multiselect.placeholder.peopleOrGroups",
          }
        }
        saveButtonPosition="bottom"
        saving={false}
        savingEnabled={true}
        selectedItemRef={
          Object {
            "current": null,
          }
        }
        valueWithImage={true}
        values={Array []}
      />
      <Memo(TeamWarningBanner)
        guests={Array []}
        teamId="eatxocwc3bg9ffo9xyybnj4omr"
        users={Array []}
      />
    </div>
  </div>
</GenericModal>
`;

exports[`components/channel_invite_modal should match snapshot for channel_invite_modal with userStatuses 1`] = `
<GenericModal
  bodyOverflowVisible={true}
  className="channel-invite"
  compassDesign={true}
  id="addUsersToChannelModal"
  modalHeaderText={
    <Memo(MemoizedFormattedMessage)
      defaultMessage="Add people to {channel}"
      id="channel_invite.addNewMembers"
      values={
        Object {
          "channel": "testing",
        }
      }
    />
  }
  onExited={[MockFunction]}
  onHide={[Function]}
  show={true}
>
  <div
    className="channel-invite__wrapper"
  >
    <div
      className="channel-invite__content"
    >
      <MultiSelect
        ariaLabelRenderer={[Function]}
        backButtonClass="btn-tertiary tertiary-button"
        backButtonClick={[Function]}
        backButtonText={
          Object {
            "defaultMessage": "Cancel",
            "id": "multiselect.cancel",
          }
        }
        buttonSubmitLoadingText={
          Object {
            "defaultMessage": "Adding...",
            "id": "multiselect.adding",
          }
        }
        buttonSubmitText={
          Object {
            "defaultMessage": "Add",
            "id": "multiselect.add",
          }
        }
        customNoOptionsMessage={null}
        focusOnLoad={true}
        handleAdd={[Function]}
        handleCancel={[Function]}
        handleDelete={[Function]}
        handleInput={[Function]}
        handlePageChange={[Function]}
        handleSubmit={[Function]}
        intl={
          Object {
            "$t": [Function],
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "defaultRichTextElements": undefined,
            "fallbackOnEmptyString": true,
            "formatDate": [Function],
            "formatDateTimeRange": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatListToParts": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "onWarn": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          }
        }
        key="addUsersToChannelKey"
        loading={true}
        optionRenderer={[Function]}
        options={Array []}
        perPage={50}
        placeholderText={
          Object {
            "defaultMessage": "Search for people or groups",
            "id": "multiselect.placeholder.peopleOrGroups",
          }
        }
        saveButtonPosition="bottom"
        saving={false}
        savingEnabled={true}
        selectedItemRef={
          Object {
            "current": null,
          }
        }
        valueWithImage={true}
        values={Array []}
      />
      <Memo(TeamWarningBanner)
        guests={Array []}
        teamId="eatxocwc3bg9ffo9xyybnj4omr"
        users={Array []}
      />
    </div>
  </div>
</GenericModal>
`;

exports[`components/channel_invite_modal should match snapshot with exclude and include users 1`] = `
<GenericModal
  bodyOverflowVisible={true}
  className="channel-invite"
  compassDesign={true}
  id="addUsersToChannelModal"
  modalHeaderText={
    <Memo(MemoizedFormattedMessage)
      defaultMessage="Add people to {channel}"
      id="channel_invite.addNewMembers"
      values={
        Object {
          "channel": "testing",
        }
      }
    />
  }
  onExited={[MockFunction]}
  onHide={[Function]}
  show={true}
>
  <div
    className="channel-invite__wrapper"
  >
    <div
      className="channel-invite__content"
    >
      <MultiSelect
        ariaLabelRenderer={[Function]}
        backButtonClass="btn-tertiary tertiary-button"
        backButtonClick={[Function]}
        backButtonText={
          Object {
            "defaultMessage": "Cancel",
            "id": "multiselect.cancel",
          }
        }
        buttonSubmitLoadingText={
          Object {
            "defaultMessage": "Adding...",
            "id": "multiselect.adding",
          }
        }
        buttonSubmitText={
          Object {
            "defaultMessage": "Add",
            "id": "multiselect.add",
          }
        }
        customNoOptionsMessage={null}
        focusOnLoad={true}
        handleAdd={[Function]}
        handleCancel={[Function]}
        handleDelete={[Function]}
        handleInput={[Function]}
        handlePageChange={[Function]}
        handleSubmit={[Function]}
        intl={
          Object {
            "$t": [Function],
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "defaultRichTextElements": undefined,
            "fallbackOnEmptyString": true,
            "formatDate": [Function],
            "formatDateTimeRange": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatListToParts": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "onWarn": [Function],
            "textComponent": "span",
            "timeZone": "Etc/UTC",
          }
        }
        key="addUsersToChannelKey"
        loading={true}
        optionRenderer={[Function]}
        options={Array []}
        perPage={50}
        placeholderText={
          Object {
            "defaultMessage": "Search for people or groups",
            "id": "multiselect.placeholder.peopleOrGroups",
          }
        }
        saveButtonPosition="bottom"
        saving={false}
        savingEnabled={true}
        selectedItemRef={
          Object {
            "current": null,
          }
        }
        valueWithImage={true}
        values={Array []}
      />
      <Memo(TeamWarningBanner)
        guests={Array []}
        teamId="eatxocwc3bg9ffo9xyybnj4omr"
        users={Array []}
      />
    </div>
  </div>
</GenericModal>
`;
