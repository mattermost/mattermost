// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/ChannelSelectorModal exclude already selected 1`] = `
<Modal
  animation={true}
  aria-labelledby="channelSelectorModalLabel"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="a11y__modal more-modal more-direct-channels channel-selector-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onExited={[Function]}
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="none"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="channelSelectorModalLabel"
    >
      <MemoizedFormattedMessage
        defaultMessage="Add Channels to <b>Channel Selection</b> List"
        id="channelSelectorModal.title"
        values={
          Object {
            "b": [Function],
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <MultiSelect
      ariaLabelRenderer={[Function]}
      buttonSubmitText={
        Object {
          "defaultMessage": "Add",
          "id": "multiselect.add",
        }
      }
      focusOnLoad={true}
      handleAdd={[Function]}
      handleDelete={[Function]}
      handleInput={[Function]}
      handlePageChange={[Function]}
      handleSubmit={[Function]}
      intl={
        Object {
          "$t": [Function],
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "defaultRichTextElements": undefined,
          "fallbackOnEmptyString": true,
          "formatDate": [Function],
          "formatDateTimeRange": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatListToParts": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "onError": [Function],
          "onWarn": [Function],
          "textComponent": "span",
          "timeZone": "Etc/UTC",
        }
      }
      key="addChannelsToSchemeKey"
      loading={true}
      numRemainingText={
        <Memo(MemoizedFormattedMessage)
          defaultMessage="Use ↑↓ to browse, ↵ to select."
          id="multiselect.selectChannels"
        />
      }
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "create_at": 0,
            "creator_id": "id",
            "delete_at": 0,
            "display_name": "name",
            "group_constrained": false,
            "header": "header",
            "id": "channel-3",
            "label": "name",
            "last_post_at": 0,
            "last_root_post_at": 0,
            "name": "DN",
            "purpose": "purpose",
            "scheme_id": "id",
            "team_display_name": "teamDisplayName",
            "team_id": "teamid1",
            "team_name": "teamName",
            "team_update_at": 0,
            "type": "O",
            "update_at": 0,
            "value": "channel-3",
          },
        ]
      }
      perPage={50}
      placeholderText={
        Object {
          "defaultMessage": "Search and add channels",
          "id": "multiselect.addChannelsPlaceholder",
        }
      }
      saveButtonPosition="top"
      saving={false}
      savingEnabled={true}
      selectedItemRef={
        Object {
          "current": null,
        }
      }
      valueRenderer={[Function]}
      valueWithImage={false}
      values={Array []}
    />
  </ModalBody>
</Modal>
`;

exports[`components/ChannelSelectorModal should match snapshot 1`] = `
<Modal
  animation={true}
  aria-labelledby="channelSelectorModalLabel"
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogClassName="a11y__modal more-modal more-direct-channels channel-selector-modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onExited={[Function]}
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  role="none"
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      bsClass="modal-title"
      componentClass="h1"
      id="channelSelectorModalLabel"
    >
      <MemoizedFormattedMessage
        defaultMessage="Add Channels to <b>Channel Selection</b> List"
        id="channelSelectorModal.title"
        values={
          Object {
            "b": [Function],
          }
        }
      />
    </ModalTitle>
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <MultiSelect
      ariaLabelRenderer={[Function]}
      buttonSubmitText={
        Object {
          "defaultMessage": "Add",
          "id": "multiselect.add",
        }
      }
      focusOnLoad={true}
      handleAdd={[Function]}
      handleDelete={[Function]}
      handleInput={[Function]}
      handlePageChange={[Function]}
      handleSubmit={[Function]}
      intl={
        Object {
          "$t": [Function],
          "defaultFormats": Object {},
          "defaultLocale": "en",
          "defaultRichTextElements": undefined,
          "fallbackOnEmptyString": true,
          "formatDate": [Function],
          "formatDateTimeRange": [Function],
          "formatDateToParts": [Function],
          "formatDisplayName": [Function],
          "formatList": [Function],
          "formatListToParts": [Function],
          "formatMessage": [Function],
          "formatNumber": [Function],
          "formatNumberToParts": [Function],
          "formatPlural": [Function],
          "formatRelativeTime": [Function],
          "formatTime": [Function],
          "formatTimeToParts": [Function],
          "formats": Object {},
          "formatters": Object {
            "getDateTimeFormat": [Function],
            "getDisplayNames": [Function],
            "getListFormat": [Function],
            "getMessageFormat": [Function],
            "getNumberFormat": [Function],
            "getPluralRules": [Function],
            "getRelativeTimeFormat": [Function],
          },
          "locale": "en",
          "messages": Object {},
          "onError": [Function],
          "onWarn": [Function],
          "textComponent": "span",
          "timeZone": "Etc/UTC",
        }
      }
      key="addChannelsToSchemeKey"
      loading={true}
      numRemainingText={
        <Memo(MemoizedFormattedMessage)
          defaultMessage="Use ↑↓ to browse, ↵ to select."
          id="multiselect.selectChannels"
        />
      }
      optionRenderer={[Function]}
      options={
        Array [
          Object {
            "create_at": 0,
            "creator_id": "id",
            "delete_at": 0,
            "display_name": "name",
            "group_constrained": false,
            "header": "header",
            "id": "channel-2",
            "label": "name",
            "last_post_at": 0,
            "last_root_post_at": 0,
            "name": "DN",
            "purpose": "purpose",
            "scheme_id": "id",
            "team_display_name": "teamDisplayName",
            "team_id": "teamid2",
            "team_name": "teamName",
            "team_update_at": 0,
            "type": "O",
            "update_at": 0,
            "value": "channel-2",
          },
          Object {
            "create_at": 0,
            "creator_id": "id",
            "delete_at": 0,
            "display_name": "name",
            "group_constrained": false,
            "header": "header",
            "id": "channel-3",
            "label": "name",
            "last_post_at": 0,
            "last_root_post_at": 0,
            "name": "DN",
            "purpose": "purpose",
            "scheme_id": "id",
            "team_display_name": "teamDisplayName",
            "team_id": "teamid1",
            "team_name": "teamName",
            "team_update_at": 0,
            "type": "O",
            "update_at": 0,
            "value": "channel-3",
          },
        ]
      }
      perPage={50}
      placeholderText={
        Object {
          "defaultMessage": "Search and add channels",
          "id": "multiselect.addChannelsPlaceholder",
        }
      }
      saveButtonPosition="top"
      saving={false}
      savingEnabled={true}
      selectedItemRef={
        Object {
          "current": null,
        }
      }
      valueRenderer={[Function]}
      valueWithImage={false}
      values={Array []}
    />
  </ModalBody>
</Modal>
`;
